<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>软件 on Daniex </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://www.daniex.tk/tags/E8BDAFE4BBB6/index.xml/</link>
    <language>zh-cn</language>
    <author>Daniex</author>
    
    <updated>Mon, 13 May 2013 02:05:57 &#43;0000</updated>
    
    <item>
      <title>px、dip、sp区别及apk的drawable资源包关系</title>
      <link>http://www.daniex.tk/blog/2013/px-dip-sp-difference-and-apk-drawable-resource-bundles-relationship/</link>
      <pubDate>Mon, 13 May 2013 02:05:57 &#43;0000</pubDate>
      <author>Daniex</author>
      <guid>http://www.daniex.tk/blog/2013/px-dip-sp-difference-and-apk-drawable-resource-bundles-relationship/</guid>
      <description>

&lt;p&gt;感谢Neak同学提出下面引用文章的分歧点，文章中存在这样的两个说法，下文中已分别标红和标蓝。【在每英寸160点的显示器上，1dp = 1px。】【density=240时 屏幕实际分辨率为480px*800px （一个点对于一个分辨率）】&lt;/p&gt;

&lt;p&gt;查阅 androd api guides发现有入下描述：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.android.com/guide/practices/screens_support.html&#34;&gt;http://developer.android.com/guide/practices/screens_support.html&lt;/a&gt;
&lt;blockquote&gt;&lt;em&gt;Density-independent pixel (dp)&lt;/em&gt;A virtual pixel unit that you should use when defining UI layout, to express layout dimensions or position in a density-independent way.&lt;/p&gt;

&lt;p&gt;The density-independent pixel is equivalent to one physical pixel on a 160 dpi screen, which is the baseline density assumed by the system for a &amp;ldquo;medium&amp;rdquo; density screen. At runtime, the system transparently handles any scaling of the dp units, as necessary, based on the actual density of the screen in use. The conversion of dp units to screen pixels is simple: &lt;code&gt;px = dp * (dpi / 160)&lt;/code&gt;. For example, on a 240 dpi screen, 1 dp equals 1.5 physical pixels. You should always use dp units when defining your application&amp;rsquo;s UI, to ensure proper display of your UI on screens with different densities.&lt;/blockquote&gt;
即android定义density=160的屏幕定位一个基准（basline），在这个基准下1px=1dp。下文标红文字是根据官方baseline转述的。标蓝色的字体中有一段描述【不同density下屏幕分辨率信息，以480dip*800dip的WVGA(density=240)为例。】假设density=240为baseline，则px及dp对应关系正如原文作者罗列表述。&lt;/p&gt;

&lt;p&gt;由此看来，转240为baseline，可以看出原作者对px和dp的理解到位，描述出来时其实无必要转换baseline，以免混淆视听。&lt;/p&gt;

&lt;p&gt;=======================================================================================&lt;/p&gt;

&lt;p&gt;下文来自 &lt;a title=&#34;px、dip、sp区别和使用方法&#34; href=&#34;http://www.cnblogs.com/warioland/archive/2011/10/17/2215110.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.cnblogs.com/warioland/archive/2011/10/17/2215110.html&#34;&gt;http://www.cnblogs.com/warioland/archive/2011/10/17/2215110.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;px、dip、sp区别和使用方法&lt;/p&gt;

&lt;p&gt;一、 概述&lt;/p&gt;

&lt;p&gt;我们在页面布局的时候，经常会设置容器的长度，但是到底该使用哪个作为长度的单位而懊恼。&lt;/p&gt;

&lt;p&gt;在Android中支持的描述大小区域的类型有以下几种。&lt;/p&gt;

&lt;p&gt;px(pixels)——像素：不同的设备显示效果相同，一般我们HVGA代表320x480像素，这个用的比较多。&lt;/p&gt;

&lt;p&gt;dip(device independent pixels)——设备独立像素：这个和设备硬件有关，一般哦我们为了支持WCGA、HVGA和QVGA推荐使用这个，不依赖于像素。等同于dp。&lt;/p&gt;

&lt;p&gt;sp(scaled pixels—best for text size)——带比例的像素。&lt;/p&gt;

&lt;p&gt;pt(points)——磅：1pt = 1/72英寸&lt;/p&gt;

&lt;p&gt;in(inches)——英寸&lt;/p&gt;

&lt;p&gt;mm(millimeters)——毫米&lt;/p&gt;

&lt;p&gt;二、 详解&lt;/p&gt;

&lt;p&gt;sp由于是放大像素，主要是用于字体显示，由此根据google的建议，TextView的字体大小最好用sp做单位，而且查看TextView的源码可知Android默认使用水平作为字号单位。&lt;/p&gt;

&lt;p&gt;在Android中最常用到的还是px和dip。但是这两个之间到底有什么区别呢？&lt;/p&gt;

&lt;p&gt;在HVGA屏density=160；QVGA屏density=120；WVGA屏density=240；WQVGA屏density=120 density值表示每英寸有多少个显示点，与分辨率是两个概念。&lt;span style=&#34;color: #0000ff;&#34;&gt;不同density下屏幕分辨率信息，以480dip*800dip的WVGA(density=240)为例。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;density=120时 屏幕实际分辨率为240px*400px （两个点对应一个分辨率）
状态栏和标题栏高各19px或者25dip
横屏是屏幕宽度400px 或者800dip,工作区域高度211px或者480dip
竖屏时屏幕宽度240px或者480dip,工作区域高度381px或者775dip&lt;/p&gt;

&lt;p&gt;density=160时 屏幕实际分辨率为320px*533px （3个点对应两个分辨率）
状态栏和标题栏高个25px或者25dip
横屏是屏幕宽度533px 或者800dip,工作区域高度295px或者480dip
竖屏时屏幕宽度320px或者480dip,工作区域高度508px或者775dip&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;density=240时 屏幕实际分辨率为480px*800px （一个点对于一个分辨率）&lt;/span&gt;
状态栏和标题栏高个38px或者25dip
横屏是屏幕宽度800px 或者800dip,工作区域高度442px或者480dip
竖屏时屏幕宽度480px或者480dip,工作区域高度762px或者775dip&lt;/p&gt;

&lt;p&gt;apk的资源包中，当屏幕density=240时使用hdpi 标签的资源
当屏幕density=160时，使用mdpi标签的资源
当屏幕density=120时，使用ldpi标签的资源。
不加任何标签的资源是各种分辨率情况下共用的。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;引用 Android上dip、dp、px、sp等单位说明&lt;/p&gt;

&lt;p&gt;本文引用自shixin20051108《Android上dip、dp、px、sp等单位说明》&lt;/p&gt;

&lt;p&gt;[ dip: device independent pixels(设备独立像素). 不同设备有不同的显示效果,这个和设备硬件有关，一般我们为了支持WVGA、HVGA和QVGA 推荐使用这个，不依赖像素。
px: pixels(像素). 不同设备显示效果相同，一般我们HVGA代表320x480像素，这个用的比较多。
pt: point，是一个标准的长度单位，1pt＝1/72英寸，用于印刷业，非常简单易用；&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;sp: scaled pixels(放大像素). 主要用于字体显示best for textsize。&lt;/h1&gt;

&lt;p&gt;关于换算（以 sp 和 pt 为例）
查看 TextView 等类的源码，可知：
case COMPLEX_UNIT_PX:
return value;
case COMPLEX_UNIT_SP:
return value * metrics.scaledDensity;
case COMPLEX_UNIT_PT:
return value * metrics.xdpi * (1.0f/72);
－－－－－－－－－－－－－－－－－－－－－－－－－－
scaledDensity = DENSITY_DEVICE / (float) DENSITY_DEFAULT;
xdpi = DENSITY_DEVICE;
－－－－－－－－－－－－－－－－－－－－－－－－－－&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;DENSITY_DEFAULT = DENSITY_MEDIUM = 160;&lt;/h1&gt;

&lt;p&gt;所以： 假设 pt 和 sp 取相同的值 1，则可设 1pt 和 1sp 之间系数为 x，
1 * DENSITY_DEVICE / 72 = x * 1 * DENSITY_DEVICE / 160 =&amp;amp;gt;
x = 160 / 72 = 2.2222&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;也就是说在 Android 中， 1pt 大概等于 2.22sp&lt;/h1&gt;

&lt;p&gt;什么是Dip和Sp
过去，程序员通常以像素为单位设计计算机用户界面。例如，定义一个宽度为300像素的表单字段，列之间的间距为5个像素，图标大小为16×16像素等。这样处理的问题在于，如果在一个每英寸点数（dpi）更高的新显示器上运行该程序，则用户界面会显得很小。在有些情况下，用户界面可能会小到难以看清内容。
与分辨率无关的度量单位可以解决这一问题。Android支持下列所有单位。
px（像素）：屏幕上的点。
in（英寸）：长度单位。
mm（毫米）：长度单位。
pt（磅）：1/72英寸。
&lt;span style=&#34;color: #ff0000;&#34;&gt;dp（与密度无关的像素）：一种基于屏幕密度的抽象单位。在每英寸160点的显示器上，1dp = 1px。&lt;/span&gt;
dip：与dp相同，多用于android/ophone示例中。
sp（与刻度无关的像素）：与dp类似，但是可以根据用户的字体大小首选项进行缩放。
为了使用户界面能够在现在和将来的显示器类型上正常显示，建议大家始终使用sp作为文字大小的单位，将dip作为其他元素的单位。当然，也可以考虑使用矢量图形，而不是用位图&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;dip: device independent pixels(设备独立像素). 不同设备有不同的显示效果,这个和设备硬件有关，一般我们为了支持WVGA、HVGA和QVGA 推荐使用这个，不依赖像素。
px: pixels(像素). 不同设备显示效果相同，一般我们HVGA代表320x480像素，这个用的比较多。
pt: point，是一个标准的长度单位，1pt＝1/72英寸，用于印刷业，非常简单易用；
sp: scaled pixels(放大像素). 主要用于字体显示best for textsize。由此，根据 google 的建议，TextView 的
字号最好使用 sp 做单位，而且查看TextView的源码可知 Android 默认使用 sp 作为字号单位。
在 Android 中， 1pt 大概等于 2.22sp以上供参考，如果 UI 能够以 sp 为单位提供设计是最好的，如果设计中没有 sp的概念，则开发人员也可以通过适当的换算取近似值。
过去，程序员通常以像素为单位设计计算机用户界面。例如，定义一个宽度为300像素的表单字段，列之间的间距为5个像素，图标大小为16×16像素等。这样处理的问题在于，如果在一个每英寸点数（dpi）更高的新显示器上运行该程序，则用户界面会显得很小。在有些情况下，用户界面可能会小到难以看清内容。
与分辨率无关的度量单位可以解决这一问题。Android支持下列所有单位。
px（像素）：屏幕上的点。
in（英寸）：长度单位。
mm（毫米）：长度单位。
pt（磅）：1/72英寸。
dp（与密度无关的像素）：一种基于屏幕密度的抽象单位。&lt;span style=&#34;color: #ff0000;&#34;&gt;在每英寸160点的显示器上，1dp = 1px。&lt;/span&gt;
dip：与dp相同，多用于android/ophone示例中。
sp（与刻度无关的像素）：与dp类似，但是可以根据用户的字体大小首选项进行缩放。
分辨率:整个屏是多少点，比如800x480，它是对于软件来说的显示单位，以px为单位的点。 density(密度)值表示每英寸有多少个显示点，与分辨率是两个概念。apk的资源包中，
当屏幕density=240时使用hdpi标签的资源
当屏幕density=160时，使用mdpi标签的资源
当屏幕density=120时，使用ldpi标签的资源。
一般android设置长度和宽度多用dip,设置字体大小多用sp. 在屏幕密度为160，1dp=1px=1dip, 1pt = &lt;sup&gt;160&lt;/sup&gt;&amp;frasl;&lt;sub&gt;72&lt;/sub&gt; sp 1pt = &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;72&lt;/sub&gt; 英寸.当屏幕密度为240时，1dp=1dip=1.5px.
为了使用户界面能够在现在和将来的显示器类型上正常显示，建议大家始终使用sp作为文字大小的单位，将dip作为其他元素的单位。当然，也可以考虑使用矢量图形，而不是用位图。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MIME详细介绍</title>
      <link>http://www.daniex.tk/blog/2012/mime-details/</link>
      <pubDate>Thu, 19 Jan 2012 01:11:28 &#43;0000</pubDate>
      <author>Daniex</author>
      <guid>http://www.daniex.tk/blog/2012/mime-details/</guid>
      <description>&lt;div id=&#34;cnblogs_post_body&#34;&gt;
（注：本文转自CSDN，因本人学习，只是做一笔记，以防遗忘。）

&lt;strong&gt;Q&lt;/strong&gt; 什么是MIME？什么是MIME邮件？

&lt;strong&gt;A&lt;/strong&gt; MIME, 全称为“Multipurpose Internet Mail Extensions”, 比较确切的中文名称为“多用途互联网邮件扩展”。它是当前广泛应用的一种电子邮件技术规范，基本内容定义于RFC 2045-2049。

自然，MIME邮件就是符合MIME规范的电子邮件，或者说根据MIME规范编码而成的电子邮件。

在MIME出台之前，使用RFC 822只能发送基本的ASCII码文本信息，邮件内容如果要包括二进制文件、声音和动画等，实现起来非常困难。MIME提供了一种可以在邮件中附加多种不 同编码文件的方法，弥补了原来的信息格式的不足。实际上不仅仅是邮件编码，现在MIME经成为HTTP协议标准的一个部分。

下面举几个MIME邮件的例子，让我们先对MIME编码的格式有个直观的印象。例1是最简单的，只带纯文本正 文，基本上就是RFC 822格式；例2复杂一些，包含纯文本和超文本正文；例3是最复杂的，包含纯文本正文、超文本正文、内嵌资源和文件附件。其中，行号和行号后的空格是为了 分析方便而另外加的，“... ... ... ...”表示此处省略了大段编码。

例1
&lt;blockquote&gt;1 Date: Thu, 18 Apr 2002 09:32:45 +0800
2 From: &amp;lt;bhw98@sina.com&amp;gt;
3 To: &amp;lt;bhwang@jlonline.com&amp;gt;
4 Subject: Test
5 Mime-Version: 1.0
6 Content-Type: text/plain; charset=&#34;iso-8859-1&#34;
7
8 This is a simple mail.
9&lt;/blockquote&gt;
例2
&lt;blockquote&gt;1 From: &#34;bhw98&#34; &amp;lt;bhw98@sina.com&amp;gt;
2 Reply-To: bhw98@sina.com
3 To: &amp;lt;bluesky7810@163.com&amp;gt;
4 Subject: Re: help
5 X-Mailer: Foxmail 4.2 [cn]
6 Mime-Version: 1.0
7 Content-Type: multipart/alternative;
8 boundary=&#34;=====002_Dragon307572345230_=====&#34;
9
10
11 This is a multi-part message in MIME format.
12
13 --=====002_Dragon307572345230_=====
14 Content-Type: text/plain; charset=&#34;GB2312&#34;
15 Content-Transfer-Encoding: quoted-printable
16
17 bluesky7810=A3=AC=C4=FA=BA=C3=A3=A1
18
19 =A1=A1=A1=A1=D4=DA=CF=C2=C6=AA=D7=EE=BA=F3=BF=C9=D2=D4=CF=C2=D4=D8=B0=A1=A3=AC=C4=E3
... ... ... ...
30 =A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A1=A12003-04-07
31
32 --=====002_Dragon307572345230_=====
33 Content-Type: text/html; charset=&#34;GB2312&#34;
34 Content-Transfer-Encoding: quoted-printable
35
36 &amp;lt;!DOCTYPE HTML PUBLIC &#34;-//W3C//DTD HTML 4.0 Transitional//EN&#34;&amp;gt;
37 &amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;
38 &amp;lt;META content=3D&#34;text/html; charset=3Dgb2312&#34;=
39 http-equiv=3DContent-Type&amp;gt;
40 &amp;lt;META content=3D&#34;MSHTML 5.00.2920.0&#34; name=3DGENERATOR&amp;gt;
... ... ... ...
79 &amp;lt;/HTML&amp;gt;
80
81 --=====002_Dragon307572345230_=====--
82&lt;/blockquote&gt;
例3
&lt;blockquote&gt;1 Return-Path: &amp;lt;bluesky7810@163.com&amp;gt;
2 Delivered-To: bhw98@sina.com
3 Received: (qmail 75513 invoked by alias); 20 May 2002 02:19:53 -0000
4 Received: from unknown (HELO bluesky) (61.155.118.135)
5 by 202.106.187.143 with SMTP; 20 May 2002 02:19:53 -0000
6 Message-ID: &amp;lt;007f01c3111c$742fec00$0100007f@bluesky&amp;gt;
7 From: &#34;=?gb2312?B?wLbAtrXEzOwNCg==?=&#34; &amp;lt;bluesky7810@163.com&amp;gt;
8 To: &#34;bhw98&#34; &amp;lt;bhw98@sina.com&amp;gt;
9 Cc: &amp;lt;bhwang@jlonline.com&amp;gt;
10 Subject: =?gb2312?B?ztK1xLbgtK6/2rPM0PI=?=
11 Date: Sat, 20 May 2002 10:03:36 +0800
12 MIME-Version: 1.0
13 Content-Type: multipart/mixed;
14 boundary=&#34;----=_NextPart_000_007A_01C3115F.80DFC5E0&#34;
15 X-Priority: 3
16 X-MSMail-Priority: Normal
17 X-Mailer: Microsoft Outlook Express 5.00.2919.6700
18 X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2919.6700
19
20 This is a multi-part message in MIME format.
21
22 ------=_NextPart_000_007A_01C3115F.80DFC5E0
23 Content-Type: multipart/related; type=&#34;multipart/alternative&#34;;
24 boundary=&#34;----=_NextPart_001_007B_01C3115F.80DFC5E0&#34;
25
26
27 ------=_NextPart_001_007B_01C3115F.80DFC5E0
28 Content-Type: multipart/alternative;
29 boundary=&#34;----=_NextPart_002_007C_01C3115F.80DFC5E0&#34;
30
31 ------=_NextPart_002_007C_01C3115F.80DFC5E0
32 Content-Type: text/plain; charset=&#34;gb2312&#34;
33 Content-Transfer-Encoding: quoted-printable
34
35 bhw98, =C4=E3=BA=C3!
36 =D5=E2=CA=C7=CE=D2=D0=B4=B5=C4=B6=E0=B4=AE=BF=DA=CD=A8=D0=C5=B5=C4=B3=CC=D0=
37 =F2, =C7=EB=D6=B8=BD=CC!
38
39
40 ------=_NextPart_002_007C_01C3115F.80DFC5E0
41 Content-Type: text/html; charset=&#34;gb2312&#34;
42 Content-Transfer-Encoding: quoted-printable
43
44 &amp;lt;!DOCTYPE HTML PUBLIC &#34;-//W3C//DTD HTML 4.0 Transitional//EN&#34;&amp;gt;
45 &amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;TITLE&amp;gt;=C7=E7=C0=CA&amp;lt;/TITLE&amp;gt;
46 &amp;lt;META content=3D&#34;text/html; charset=3Dgb2312&#34; http-equiv=3DContent-Type&amp;gt;
47 &amp;lt;STYLE&amp;gt;BODY {
48 COLOR: #0033cc; FONT-FAMILY: =CB=CE=CC=E5, Arial, Helvetica; FONT-SIZE: =
49 9pt; MARGIN-LEFT: 10px; MARGIN-TOP: 25px
50 }
51 &amp;lt;/STYLE&amp;gt;
52 &amp;lt;META content=3D&#34;MSHTML 5.00.2920.0&#34; name=3DGENERATOR&amp;gt;&amp;lt;/HEAD&amp;gt;
53 &amp;lt;BODY background=3Dcid:007901c3111c$72b978a0$0100007f@bluesky =
54 bgColor=3D#ffffff&amp;gt;
55 &amp;lt;DIV&amp;gt;
56 &amp;lt;DIV&amp;gt;bhw98, =C4=E3=BA=C3!&amp;lt;/DIV&amp;gt;
57 &amp;lt;P&amp;gt;=D5=E2=CA=C7=CE=D2=D0=B4=B5=C4=B6=E0=B4=AE=BF=DA=CD=A8=D0=C5=B5=C4=B3=CC=
58 =D0=F2, =C7=EB=D6=B8=BD=CC!&amp;lt;/P&amp;gt;&amp;lt;/DIV&amp;gt;
59 &amp;lt;P&amp;gt; &amp;lt;/P&amp;gt;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;
60
61 ------=_NextPart_002_007C_01C3115F.80DFC5E0--
62
63 ------=_NextPart_001_007B_01C3115F.80DFC5E0
64 Content-Type: image/jpeg; name=&#34;=?gb2312?B?x+fAyrGzvrAuSlBH?=&#34;
65 Content-Transfer-Encoding: base64 66 Content-ID: &amp;lt;007901c3111c$72b978a0$0100007f@bluesky&amp;gt;
67
68 /9j/4AAQSkZJRgABAgEASABIAAD/7QVoUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA
69 AQBIAAAAAQABOEJJTQPzAAAAAAAIAAAAAAAAAAA4QklNBAoAAAAAAAEAADhCSU0nEAAAAAAACgAB
70 AAAAAAAAAAI4QklNA/UAAAAAAEgAL2ZmAAEAbGZmAAYAAAAAAAEAL2ZmAAEAoZmaAAYAAAAAAAEA
... ... ... ...
169 RxVw98Vawq12xQ44q0cKtHFDWKGsKt4EtiuKt4q//9k=
170
171 ------=_NextPart_001_007B_01C3115F.80DFC5E0--
172
173 ------=_NextPart_000_007A_01C3115F.80DFC5E0
174 Content-Type: application/msword; name=&#34;readme.doc&#34;
175 Content-Transfer-Encoding: base64
176 Content-Disposition: attachment; filename=&#34;readme.doc&#34;
177
178 0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAJgAAAAAAAAAA
179 EAAAKAAAAAEAAAD+////AAAAACUAAAD/////////////////////////////////////////////
180 ////////////////////////////////////////////////////////////////////////////
... ... ... ...
1688 AAAAAAAAAAAAAAAAAAA=
1689
1690 ------=_NextPart_000_007A_01C3115F.80DFC5E0
1691 Content-Type: application/x-zip-compressed;
1692 name=&#34;=?gb2312?B?tuC0rr/azajQxbXE1LTC6y56aXA=?=&#34;
1693 Content-Transfer-Encoding: base64
1694 Content-Disposition: attachment;
1695 filename=&#34;=?gb2312?B?tuC0rr/azajQxbXE1LTC6y56aXA=?=&#34;
1696
1697 UEsDBBQAAAAIAFKAoi7qOMOvLw0AAABWAAAUAAAAtuC0rr/azajQxbXE1LTC6y5kb2PtXHtwVNUZ
1698 /+4+kk3IQoAkBkRYQkSgbrKb7IYNEMwmm6ckG0jCI0boZneTbJJ9sNlAEsdOtFqd8Z846tQ6PhB1
1699 hrZTJoK0Vhgf1aGt4rMy6D8tdugfTjuOpcBIR9j+vvsIy4YkRNTRen87v/ud53cee+6557vn7L73
... ... ... ...
3125 zajQxbXE1LTC6y5kb2NQSwUGAAAAAAEAAQBCAAAAYQ0AAA==
3126
3127 ------=_NextPart_000_007A_01C3115F.80DFC5E0--
3128&lt;/blockquote&gt;
&lt;strong&gt;Q&lt;/strong&gt; 在开始研究MIME邮件的时候，如何得到这样的源码？

&lt;strong&gt;A&lt;/strong&gt; 一些功能比较完善的邮件客户端软件，如微软的Outlook Express，国产的Foxmail等，都提供了查看和保存邮件源码(原始信息)的功能。在Foxmail中，选择邮件列表右键菜单的“原始信息”进行 查看，主菜单的“文件-导出”进行保存。在Outlook Express中，对应的操作分别是“属性”和“另存为”。所保存的.eml文件，可以调用这些程序打开。

&lt;strong&gt;Q&lt;/strong&gt; 请介绍一下MIME邮件的组成？

&lt;strong&gt;A&lt;/strong&gt; 总体来说，MIME消息由消息头和消息体两大部分组成。现在我们关注的是MIME邮件，因此在以下的讨论中姑且称“消息”为“邮件”。在上面的例子中，例 1的1-6行，例2的1—8行，例3的1-18行，是邮件头；例1的8—9行，例2的10—82行，例3的20—3128行，是邮件体。邮件头与邮件体之 间以空行进行分隔，如例1的第7行，例2的第9行，例3的第19行。邮件头中不允许出现空行。有一些邮件不能被邮件客户端软件识别，显示的是原始码，就是 因为首行是空行。

邮件头包含了发件人、收件人、主题、时间、MIME版本、邮件内容的类型等重要信息。每条信息称为一个域，由 域名后加“: ”和信息内容构成，可以是一行，较长的也可以占用多行。域的首行必须“顶头”写，即左边不能有空白字符（空格和制表符）；续行则必须以空白字符打头，且第 一个空白字符不是信息本身固有的，解码时要过滤掉。如例2的7-8行，例3的4-5行，13-14行，分别属于一个域。

邮件体包含邮件的内容，它的类型由邮件头的“Content-Type”域指出。常见的简单类型有text/plain(纯文本)和text/html(超文本)。

例2和例3中出现的multipart类型，是MIME邮件的精髓。邮件体被分为多个段，每个段又包含段头和 段体两部分，这两部分之间也以空行分隔。常见的multipart类型有三种：multipart/mixed, multipart/related和multipart/alternative。从它们的名称，不难推知这些类型各自的含义和用处。它们之间的层次关 系可归纳为下图所示：
&lt;pre&gt;+------------------------- multipart/mixed ----------------------------+
|                                                                      |
|  +----------------- multipart/related ------------------+            |
|  |                                                      |            |
|  |  +----- multipart/alternative ------+  +----------+  |  +------+  |
|  |  |                                  |  | 内嵌资源 |  |  | 附件 |  |
|  |  |  +------------+  +------------+  |  +----------+  |  +------+  |
|  |  |  | 纯文本正文 |  | 超文本正文 |  |                |            |
|  |  |  +------------+  +------------+  |  +----------+  |  +------+  |
|  |  |                                  |  | 内嵌资源 |  |  | 附件 |  |
|  |  +----------------------------------+  +----------+  |  +------+  |
|  |                                                      |            |
|  +------------------------------------------------------+            |
|                                                                      |
+----------------------------------------------------------------------+&lt;/pre&gt;
可以看出，如果在邮件中要添加附件，必须定义multipart/mixed段；如果存在内嵌资源，至少要定义 multipart/related段；如果纯文本与超文本共存，至少要定义multipart/alternative段。什么是“至少”？举个例子 说，如果只有纯文本与超文本正文，那么在邮件头中将类型扩大化，定义为multipart/related，甚至multipart/mixed，都是允 许的。

multipart诸类型的共同特征是，在段头指定“boundary”参数字符串，段体内的每个子段以此串 定界。所有的子段都以“--”+boundary行开始，父段则以“--”+boundary+“--”行结束。段与段之间也以空行分隔。在邮件体是 multipart类型的情况下，邮件体的开始部分(第一个“--”+boundary行之前)可以有一些附加的文本行，相当于注释，解码时应忽略。段间 也可以有一些附加的文本行，不会显示出来，如果有兴趣，不妨验证一下。

结合boundary定界和multipart层次关系图，我们分析一下例2和例3的邮件体层次与段嵌套关系。

在例2中，10-12行是附加文本行，13-82行是multipart/alternative型的段，包含两个子段：13-30行是纯文本正文，32-79行是超文本正文。

在例3中，20-21行是附加文本行，22-3127行是multipart/mixed型的段，包含3个子 段：22-171行是multipart/related段，173-1688行与1690-3125行是两个附件。multipart/related 段又包含两个子段：27-61行是multipart/alternative段，63-169行是一个内嵌资源(图片)。multipart /alternative段又包含两个子段：31-48行是纯文本正文，40-59行是超文本正文。

例1只有纯文本正文，实际上属于multipart层次关系图中的一个特殊情况。如果非要避简就繁，写成下面的形式，也是完全符合MIME精神的。
&lt;blockquote&gt;Date: Thu, 18 Apr 2002 09:32:45 +0800
From: &amp;lt;bhw98@sina.com&amp;gt;
To: &amp;lt;bhwang@jlonline.com&amp;gt;
Subject: Test
Mime-Version: 1.0
Content-Type: multipart/alternative; boundary=&#34;{[(^_^)]}&#34; --{[(^_^)]}
Content-Type: text/plain; charset=&#34;iso-8859-1&#34;
Content-Transfer-Encoding: 7bit This is a simple mail. --{[(^_^)]}--&lt;/blockquote&gt;
&lt;strong&gt;Q&lt;/strong&gt; 在邮件头和段头中，有哪一些常见的域？

&lt;strong&gt;A&lt;/strong&gt; 在邮件头中，有很多从RFC 822沿用的域名，MIME也增加了一些。常见的标准域名和含义如下
&lt;table align=&#34;center&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;域名&lt;/td&gt;
&lt;td&gt;含义&lt;/td&gt;
&lt;td&gt;添加者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Received&lt;/td&gt;
&lt;td&gt;传输路径&lt;/td&gt;
&lt;td&gt;各级邮件服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Return-Path&lt;/td&gt;
&lt;td&gt;回复地址&lt;/td&gt;
&lt;td&gt;目标邮件服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Delivered-To&lt;/td&gt;
&lt;td&gt;发送地址&lt;/td&gt;
&lt;td&gt;目标邮件服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reply-To&lt;/td&gt;
&lt;td&gt;回复地址&lt;/td&gt;
&lt;td&gt;邮件的创建者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;From&lt;/td&gt;
&lt;td&gt;发件人地址&lt;/td&gt;
&lt;td&gt;邮件的创建者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;To&lt;/td&gt;
&lt;td&gt;收件人地址&lt;/td&gt;
&lt;td&gt;邮件的创建者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cc&lt;/td&gt;
&lt;td&gt;抄送地址&lt;/td&gt;
&lt;td&gt;邮件的创建者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bcc&lt;/td&gt;
&lt;td&gt;暗送地址&lt;/td&gt;
&lt;td&gt;邮件的创建者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;日期和时间&lt;/td&gt;
&lt;td&gt;邮件的创建者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Subject&lt;/td&gt;
&lt;td&gt;主题&lt;/td&gt;
&lt;td&gt;邮件的创建者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Message-ID&lt;/td&gt;
&lt;td&gt;消息ID&lt;/td&gt;
&lt;td&gt;邮件的创建者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MIME-Version&lt;/td&gt;
&lt;td&gt;MIME版本&lt;/td&gt;
&lt;td&gt;邮件的创建者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Type&lt;/td&gt;
&lt;td&gt;内容的类型&lt;/td&gt;
&lt;td&gt;邮件的创建者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Transfer-Encoding&lt;/td&gt;
&lt;td&gt;内容的传输编码方式&lt;/td&gt;
&lt;td&gt;邮件的创建者&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
非标准的、自定义域名都以X-开头，例如X-Mailer, X-MSMail-Priority等，通常在接收和发送邮件的是同一程序时才能理解它们的意义。

在段头中，大致有如下一些域
&lt;table align=&#34;center&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;域名&lt;/td&gt;
&lt;td&gt;含义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Type&lt;/td&gt;
&lt;td&gt;段体的类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Transfer-Encoding&lt;/td&gt;
&lt;td&gt;段体的传输编码方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Disposition&lt;/td&gt;
&lt;td&gt;段体的安排方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-ID&lt;/td&gt;
&lt;td&gt;段体的ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Location&lt;/td&gt;
&lt;td&gt;段体的位置(路径)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Base&lt;/td&gt;
&lt;td&gt;段体的基位置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
有 的域除了值之外，还带有参数。值与参数、参数与参数之间以“;”分隔。参数名与参数值之间以“=”分隔。如例3的28-29行，Content-Type 域的值为“multipart/alternative”，此外有一个参数boundary，值 为&#34;----=_NextPart_002_007C_01C3115F.80DFC5E0&#34;。又如例3的第176行，Content- Disposition域的值为“attachment”，此外有一个参数filename，值为“readme.doc”。

&lt;strong&gt;Q&lt;/strong&gt; Content-Type以及它们的参数有哪些形式？

&lt;strong&gt;A&lt;/strong&gt; Content-Type都是“主类型/子类型”的形式。主类型有text, image, audio, video, application, multipart, message等，分别表示文本、图片、音频、视频、应用、分段、消息等。每个主类型都可能有多个子类型，如text类型就包含plain, html, xml, css等子类型。以X-开头的主类型和子类型，同样表示自定义的类型，未向IANA正式注册，但大多已经约定成俗了。如application/x- zip-compressed是ZIP文件类型。在Windows中，注册表的“HKEY_CLASSES_ROOT\MIME\Database \Content Type”内列举了除multipart之外大部分已知的Content-Type。

关于参数的形式，RFC里有很多补充规定，有的允许带几个参数，较为常见的有
&lt;table align=&#34;center&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;主类型&lt;/td&gt;
&lt;td&gt;参数名&lt;/td&gt;
&lt;td&gt;含义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;charset&lt;/td&gt;
&lt;td&gt;字符集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image&lt;/td&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application&lt;/td&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;multipart&lt;/td&gt;
&lt;td&gt;boundary&lt;/td&gt;
&lt;td&gt;边界&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
其中字符集也能在Windows注册表的“HKEY_CLASSES_ROOT\MIME\Database\Charset”内见到。

&lt;strong&gt;Q&lt;/strong&gt; Content-Transfer-Encoding有哪些？有什么特点？

&lt;strong&gt;A&lt;/strong&gt; Content-Transfer-Encoding共有Base64, Quoted-printable, 7bit, 8bit, Binary等几种。其中7bit是缺省的编码方式。电子邮件源码最初设计为全部是可打印的ASCII码的形式。非ASCII码的文本或数据要编码成要求 的格式，如上面的三个例子。Base64, Quoted-Printable是在非英语国家使用最广使的编码方式。Binary方式只具有象征意义，而没有任何实用价值。

Base64将输入的字符串或一段数据编码成只含有 {&#39;A&#39;-&#39;Z&#39;, &#39;a&#39;-&#39;z&#39;, &#39;0&#39;-&#39;9&#39;, &#39;+&#39;, &#39;/&#39;}这64个字符的串，&#39;=&#39;用于填充。其编码的方法是，将输入数据流每次取6 bit，用此6 bit的值(0-63)作为索引去查表，输出相应字符。这样，每3个字节将编码为4个字符(3×8 → 4×6)；不满4个字符的以&#39;=&#39;填充。有的场合，以“=?charset?B?xxxxxxxx?=”表示xxxxxxxx是Base64编码，且原文 的字符集是charset。如例3第7行&#34;=?gb2312?B?wLbAtrXEzOwNCg==?=&#34;是由简体中文“蓝蓝的天”编码而成的。在段体内 则直接编码，适当时机换行，MIME建议每行最多76个字符。如例3的1697-3125行，是一个ZIP文件的Base64编码。

Quoted-printable根据输入的字符串或字节 范围进行编码，若是不需编码的字符，直接输出；若需要编码，则先输出&#39;=&#39;，后面跟着以2个字符表示的十六进制字节值。有的场合，以 “=?charset?Q?xxxxxxxx?=”表示xxxxxxxx是Quoted-printable编码，且原文的字符集是charset。在段 体内则直接编码，适当时机换行，换行前额外输出一个&#39;=&#39;。如例3的44-59行，是HTML文本的Quoted-printable编码。其中第45行 “=C7=E7=C0=CA”原文是“晴朗”，因为“晴”的GB2312码是C7E7，“朗”的GB2312码是C0CA。第48、53、57行末尾只有 孤零零的&#39;=&#39;，表示这是由编码造成的软回车，而非原文固有的。

近年来，国内多数邮件服务器已经支持8bit方式，因此只在国内传输的邮件，特别是在邮件头中，可直接使用8bit编码，对汉字不做处理。如果邮件要出国，还是老老实实地按Base64或Quoted-printable编码才行。

&lt;strong&gt;Q&lt;/strong&gt; 什么是内嵌资源？它有哪些形式？

&lt;strong&gt;A&lt;/strong&gt; 内嵌资源也是MIME的一个发光点，它能使邮件内容变得生动活泼、丰富多彩。可在邮件的multipart/related框架内定义一些与正文关联的图 片、动画、声音甚至CSS样式和脚本的段。通常在HTML正文内，使用超级链接与内嵌资源相联系。如在例3中，HTML正文53-54行，解码后为
&lt;blockquote&gt;&amp;lt;BODY background=cid:007901c3111c$72b978a0$0100007f@bluesky bgColor=#ffffff&amp;gt;&lt;/blockquote&gt;
它指出用一个Content-ID为007901c3111c$72b978a0$0100007f@bluesky的图片作为背景(cid:xxxxxxxx也是一种超级链接)。而64-169行恰好就是这样一个内嵌资源。

除了用Content-ID进行联系外，还有另外一种常用形式：用普通超级连接和Content-Location。例如：

在HTML正文中，
&lt;blockquote&gt;... ... ... ... &amp;lt;
IMG SRC=&#34;http://www.dangdang.com/images/all/anti_joyo_dm_book.gif&#34;&amp;gt;
... ... ... ... &amp;lt;
IMG SRC=&#34;http://www.dangdang.com/dd2001/getimage_small.asp?id=486341&#34;&amp;gt;
... ... ... ...&lt;/blockquote&gt;
对应的内嵌资源为
&lt;blockquote&gt;Content-Type: image/gif; name=&#34;anti_joyo_dm_book.gif&#34;
Content-Transfer-Encoding: base64
Content-Location: http://www.dangdang.com/images/all/anti_joyo_dm_book.gif
... ... ... ...
Content-Type: application/octet-stream; name=&#34;getimage_small.asp?id=486341&#34;
Content-Transfer-Encoding: base64
Content-Location: http://www.dangdang.com/dd2001/getimage_small.asp?id=486341
... ... ... ...&lt;/blockquote&gt;
另外，
&lt;blockquote&gt;Content-Location: http://www.dangdang.com/images/all/anti_joyo_dm_book.gif&lt;/blockquote&gt;
与
&lt;blockquote&gt;Content-Location: anti_joyo_dm_book.gif Content-Base: http://www.dangdang.com/images/all/&lt;/blockquote&gt;
是等效的。

&lt;strong&gt;Q&lt;/strong&gt; 邮件病毒如何利用附件和内嵌资源传播？

&lt;strong&gt;A&lt;/strong&gt; 有的邮件附件可能带有病毒，容易理解。附件毕竟是文件，也好预防，不轻易打开就是了。但内嵌资源是在浏览邮件内容时就要访问的，若其中藏有病毒或恶意代码，你在不知不觉中就中招了。如前两年曾经在全球范围内流行的Nimda病毒，功能性源码如下：
&lt;blockquote&gt;MIME-Version: 1.0
Content-Type: multipart/related; type=&#34;multipart/alternative&#34;; boundary=&#34;====_ABC1234567890DEF_====&#34;

--====_ABC1234567890DEF_====
Content-Type: multipart/alternative; boundary=&#34;====_ABC0987654321DEF_====&#34;

--====_ABC0987654321DEF_====
Content-Type: text/html; charset=&#34;iso-8859-1&#34;
Content-Transfer-Encoding: 7bit &amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY bgColor=#ffffff&amp;gt; &amp;lt;iframe src=cid:EA4DMGBP9p height=0 width=0&amp;gt; &amp;lt;/iframe&amp;gt;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;

--====_ABC0987654321DEF_====--

--====_ABC1234567890DEF_====
Content-Type: audio/x-wav; name=&#34;readme.exe&#34;
Content-Transfer-Encoding: base64 Content-ID: &amp;lt;EA4DMGBP9p&amp;gt; TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAA2AAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v ZGUuDQ0KJAAAAAAAAAA11CFvcbVPPHG1TzxxtU88E6pcPHW1TzyZqkU8dbVPPJmqSzxytU88cbVO
... ... ... ... ... ... ... ...
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=

--====_ABC1234567890DEF_====&lt;/blockquote&gt;
它 将一个可执行文件作为资源嵌入了框架型页面，却声明这段可执行代码是波形声音类型。由于当时微软的IE(版本5.0及以下)存在重大安全漏洞，没有检查 Content-Type与name的扩展名是否匹配，于是就被轻易骗过了，致使点选或打开邮件时自动运行了这个“readme.exe”，机器就感染上 病毒。带毒的机器利用地址簿向别人发送带毒的邮件，一传十，十传百，Nimda蠕虫大行其道。

纵观历史，病毒刚出来时是厉害，但没有任何一种能够持续肆虐下去。Nimda如此，SARS亦当如此。曰：“多难兴邦，众志成城”，又曰：“非典终将倒下，城市精神永存”，相信我们定能很快战胜“非典”!

病毒库升级是跟在新病毒屁股后进行的，不要过分依赖杀毒软件。一个良好的习惯是关闭邮件预览功能，或者设定预览纯文本部分，先查看邮件源码，确信排除病毒嫌疑后再打开。对陌生人发来的带超文本正文的邮件，尤其要当心。永远不要在邮件客户端软件内直接打开附件。

&lt;strong&gt;Q&lt;/strong&gt; 一些垃圾邮件采取隐藏发件人的方式，如何追查它们来自哪里？

&lt;strong&gt;A&lt;/strong&gt; 从上面的邮件头域名表中可以看出，邮件的创建者可以掌握大部分的域的内容，但Received等域由各级服务器自动添加，发件人是鞭长莫及。垃圾邮件一般 采用了群发软件发送，邮件头的From域(发件人地址)可以任意伪造，甚至写成收件人地址(收到了自己并没有发过的垃圾邮件，气愤吧？)。查看 Received域(传输路径)链可以找到真正的出处。每个服务器添加的Received语句都在邮件首，故最下面一个Received就包含了发件人所 用的SMTP或HTTP服务器，及最初的网关外部IP地址。

Receive语句的基本格式是：from A by B。A为发送方，B为接收方。例如：
&lt;blockquote&gt;Received: (qmail 45304 invoked from network); 4 May 2003 17:05:47 -0000 Received: from unknown (HELO bjapp9.163.net) (202.108.255.197) by 202.106.182.244 with SMTP; 4 May 2003 17:05:47 -0000 Received: from localhost (localhost [127.0.0.1]) by bjapp9.163.net (Postfix) with SMTP id E1C761D84C631 for &amp;lt;bhw98@sina.com&amp;gt;; Mon, 5 May 2003 01:07:26 +0800 (CST) Received: from fanyingxxxx@tom.com (unknown [211.99.162.194]) by bjapp9.163.net (Coremail) with SMTP id OgEAAM1ItT7MNaLC.1 for &amp;lt;bhw98@sina.com&amp;gt;; Mon, 05 May 2003 01:07:26 +0800 (CST)&lt;/blockquote&gt;
从 上面的例子中不难看出，该邮件的传输路径是：211.99.162.194 → bjapp9.163.net (Coremail 202.108.255.197?) → bjapp9.163.net (Postfix, 202.108.255.197?) → 202.106.182.244。恰好出现了发件人邮箱fanyingxxxx@tom.com，但多数情况不一定能列出来。

此例的localhost [127.0.0.1]，意味着bjapp9.163.net上安装了邮件服务代理性质的软件。

&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>http协议头部与keep-alive</title>
      <link>http://www.daniex.tk/blog/2011/http-keep-alive/</link>
      <pubDate>Thu, 28 Jul 2011 10:40:11 &#43;0000</pubDate>
      <author>Daniex</author>
      <guid>http://www.daniex.tk/blog/2011/http-keep-alive/</guid>
      <description>

&lt;p&gt;上一篇讲&lt;a href=&#34;../java-send-http-request-example.html&#34;&gt;java发送http请求例子&lt;/a&gt;遇到的问题并不是java发送请求的代码问题。经检查是http server代码不完善导致，连接状态即http头中Connection参数设置有问题。&lt;/p&gt;

&lt;p&gt;在网上看到一篇挺好的文章，找了半天才找到原文出处，这就是在网上码字的悲哀。我也转个：&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;-——————————————————————————————————&lt;/p&gt;

&lt;p&gt;这样被判了死刑&amp;ndash;吴秦 &lt;a title=&#34;HTTP协议头部与Keep-Alive模式详解 &#34; href=&#34;http://www.cnblogs.com/skynet/archive/2010/12/11/1903347.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.cnblogs.com/skynet/archive/2010/12/11/1903347.html&#34;&gt;http://www.cnblogs.com/skynet/archive/2010/12/11/1903347.html&lt;/a&gt;&lt;/a&gt;
&lt;div id=&#34;cnblogs_post_body&#34;&gt;&lt;/p&gt;

&lt;p&gt;——献给那些向我这样对HTTP的“伪”熟悉者。&lt;/p&gt;

&lt;p&gt;故事发生在10月份的一次面试经历中，本来我不想说出来丢人显眼，但是为了警醒自己和告诫后人，我决定写成博文发出来。因为在面试过程中，我讲在2009年写过QQ农场助手，在这期间深入学习了HTTP协议，而且在2010-05-18写了博文：&lt;a href=&#34;http://www.cnblogs.com/skynet/archive/2010/05/18/1738301.html&#34;&gt;HTTP协议及其POST与GET操作差异 &amp;amp; C#中如何使用POST、GET等&lt;/a&gt;。面试官说既然我熟悉HTTP协议，就问“当HTTP采用keepalive模式，当客户端向服务器发生请求之后，客户端如何判断服务器的数据已经发生完成？”&lt;/p&gt;

&lt;p&gt;说实话，当时我懵了，一直没有关注过keepalive模式。我只知道：&lt;strong&gt;HTTP协议中客户端发送一个小请求，服务器响应以所期望的信息（例如一个html文件或一副gif图像）。服务器通常在发送回所请求的数据之后就关闭连接。这样客户端读数据时会返回EOF（-1），就知道数据已经接收完全了。&lt;/strong&gt;我就这样被面试官判了死刑！！！说我完全停留在表面，没有深入（当时真的很受打击，一直自认为技术还不错！）。我当时真的很想找各种借口：
&lt;ul&gt;
    &lt;li&gt;
&lt;div&gt;之前没有用到HTTP的keepalive模式，所以没有深入&lt;/div&gt;&lt;/li&gt;
    &lt;li&gt;
&lt;div&gt;好久没有用HTTP协议，细节忘了&lt;/div&gt;&lt;/li&gt;
    &lt;li&gt;
&lt;div&gt;实习的东西跟HTTP协议没有关系，用得少了就忘了&lt;/div&gt;&lt;/li&gt;
    &lt;li&gt;
&lt;div&gt;。。。。。。&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
觉得各种解释都是那么苍白无力！我再次感叹书到用时方恨少，也感叹一个人的时间是多么的有限（曾一度想成为一个IT专业全才），根本没有精力面面俱 到，而且当没有真正使用一个东西的时候，往往会忽略掉很多细节。朋友如果你也答不上来，请认真细看下文，不要怀着浮躁了的心，说不定下次就有人问你这个问 题。
&lt;h1&gt;1、什么是Keep-Alive模式？&lt;/h1&gt;
我们知道HTTP协议采用“请求-应答”模式，当使用普通模式，即非KeepAlive模式时，每个请求/应答客户和服务器都要新建一个连接，完成 之后立即断开连接（HTTP协议为无连接的协议）；当使用Keep-Alive模式（又称持久连接、连接重用）时，Keep-Alive功能使客户端到服 务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; title=&#34;Connection&#34; src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/HTTP_persistent_connection.svg/450px-HTTP_persistent_connection.svg.png&#34; alt=&#34;&#34; width=&#34;450&#34; height=&#34;280&#34; /&gt;&lt;/p&gt;

&lt;p&gt;http 1.0中默认是关闭的，需要在http头加入&amp;rdquo;Connection: Keep-Alive&amp;rdquo;，才能启用Keep-Alive；http 1.1中默认启用Keep-Alive，如果加入&amp;rdquo;Connection: close &amp;ldquo;，才关闭。目前大部分浏览器都是用http1.1协议，也就是说默认都会发起Keep-Alive的连接请求了，所以是否能完成一个完整的Keep- Alive连接就看服务器设置情况。
&lt;h1&gt;2、启用Keep-Alive的优点&lt;/h1&gt;
从上面的分析来看，启用Keep-Alive模式肯定更高效，性能更高。因为避免了建立/释放连接的开销。下面是&lt;a href=&#34;http://tools.ietf.org/html/rfc2616&#34;&gt;RFC 2616&lt;/a&gt;上的总结：
&lt;ol&gt;
    &lt;li&gt;
&lt;ol&gt;
    &lt;li&gt;
&lt;div&gt;By opening and closing fewer TCP connections, CPU time is saved in routers and hosts (clients, servers, proxies, gateways, tunnels, or caches), and memory used for TCP protocol control blocks can be saved in hosts.&lt;/div&gt;&lt;/li&gt;
    &lt;li&gt;
&lt;div&gt;HTTP requests and responses can be pipelined on a connection. Pipelining allows a client to make multiple requests without waiting for each response, allowing a single TCP connection to be used much more efficiently, with much lower elapsed time.&lt;/div&gt;&lt;/li&gt;
    &lt;li&gt;
&lt;div&gt;Network congestion is reduced by reducing the number of packets caused by TCP opens, and by allowing TCP sufficient time to determine the congestion state of the network.&lt;/div&gt;&lt;/li&gt;
    &lt;li&gt;
&lt;div&gt;Latency on subsequent requests is reduced since there is no time spent in TCP&amp;rsquo;s connection opening handshake.&lt;/div&gt;&lt;/li&gt;
    &lt;li&gt;
&lt;div&gt;HTTP can evolve more gracefully, since errors can be reported without the penalty of closing the TCP connection. Clients using     future versions of HTTP might optimistically try a new feature, but if communicating with an older server, retry with old   semantics after an error is reported.&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;a href=&#34;http://tools.ietf.org/html/rfc2616&#34;&gt;RFC 2616&lt;/a&gt;（P47）还指出：单用户客户端与任何服务器或代理之间的连接数不应该超过2个。一个代理与其它服务器或代码之间应该使用超过2 * N的活跃并发连接。这是为了提高HTTP响应时间，避免拥塞（冗余的连接并不能代码执行性能的提升）。
&lt;h1&gt;3、回到我们的问题（即如何判断消息内容/长度的大小？）&lt;/h1&gt;
Keep-Alive模式，客户端如何判断请求所得到的响应数据已经接收完成（或者说如何知道服务器已经发生完了数据）？我们已经知道 了，Keep-Alive模式发送玩数据HTTP服务器不会自动断开连接，所有不能再使用返回EOF（-1）来判断（当然你一定要这样使用也没有办法，可 以想象那效率是何等的低）！下面我介绍两种来判断方法。
&lt;h2&gt;3.1、使用消息首部字段Conent-Length&lt;/h2&gt;
故名思意，Conent-Length表示实体内容长度，客户端（服务器）可以根据这个值来判断数据是否接收完成。但是如果消息中没有Conent-Length，那该如何来判断呢？又在什么情况下会没有Conent-Length呢？请继续往下看……
&lt;h2&gt;3.2、使用消息首部字段Transfer-Encoding&lt;/h2&gt;
当客户端向服务器请求一个静态页面或者一张图片时，服务器可以很清楚的知道内容大小，然后通过Content-length消息首部字段告诉客户端 需要接收多少数据。但是如果是动态页面等时，服务器是不可能预先知道内容大小，这时就可以使用Transfer-Encoding：chunk模式来传输 数据了。即如果要一边产生数据，一边发给客户端，服务器就需要使用&amp;rdquo;Transfer-Encoding: chunked&amp;rdquo;这样的方式来代替Content-Length。&lt;/p&gt;

&lt;p&gt;chunk编码将数据分成一块一块的发生。Chunked编码将使用若干个Chunk串连而成，由一个标明&lt;strong&gt;长度为0&lt;/strong&gt;的chunk标示结束。每个Chunk分为头部和正文两部分，头部内容指定正文的字符总数（&lt;strong&gt;十六进制的数字&lt;/strong&gt;）和数量单位（一般不写），正文部分就是指定长度的实际内容，两部分之间用&lt;strong&gt;回车换行(CRLF)&lt;/strong&gt;隔开。在最后一个长度为0的Chunk中的内容是称为footer的内容，是一些附加的Header信息（通常可以直接忽略）。
&lt;blockquote&gt;Chunk编码的格式如下：&lt;/p&gt;

&lt;p&gt;Chunked-Body = *&lt;strong&gt;chunk&lt;/strong&gt;
&amp;ldquo;0&amp;rdquo; CRLF
footer
CRLF
chunk = chunk-size [ chunk-ext ] CRLF
chunk-data CRLF&lt;/p&gt;

&lt;p&gt;hex-no-zero = &amp;lt;HEX excluding &amp;ldquo;0&amp;rdquo;&amp;gt;&lt;/p&gt;

&lt;p&gt;chunk-size = hex-no-zero *HEX
chunk-ext = *( &amp;ldquo;;&amp;rdquo; chunk-ext-name [ &amp;ldquo;=&amp;rdquo; chunk-ext-value ] )
chunk-ext-name = token
chunk-ext-val = token | quoted-string
chunk-data = chunk-size(OCTET)&lt;/p&gt;

&lt;p&gt;footer = *entity-header&lt;/p&gt;

&lt;p&gt;即Chunk编码由四部分组成：1、&lt;strong&gt;0至多个chunk块&lt;/strong&gt;，2、&lt;strong&gt;&amp;ldquo;0&amp;rdquo; CRLF&lt;/strong&gt;，3、&lt;strong&gt;footer&lt;/strong&gt;，4、&lt;strong&gt;CRLF&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;而每个chunk块由：chunk-size、chunk-ext（可选）、CRLF、chunk-data、CRLF组成。&lt;/blockquote&gt;
&lt;h1&gt;4、消息长度的总结&lt;/h1&gt;
其实，上面2中方法都可以归纳为是如何判断http消息的大小、消息的数量。&lt;a href=&#34;http://tools.ietf.org/html/rfc2616&#34;&gt;RFC 2616&lt;/a&gt;对 消息的长度总结如下：一个消息的transfer-length（传输长度）是指消息中的message-body（消息体）的长度。当应用了 transfer-coding（传输编码），每个消息中的message-body（消息体）的长度（transfer-length）由以下几种情况 决定（优先级由高到低）：
&lt;ul&gt;
    &lt;li&gt;任何不含有消息体的消息（如1XXX、204、304等响应消息和任何头(HEAD，首部)请求的响应消息），总是由一个空行（CLRF）结束。&lt;/li&gt;
    &lt;li&gt;如果出现了Transfer-Encoding头字段 并且值为非“identity”，那么transfer-length由“chunked” 传输编码定义，除非消息由于关闭连接而终止。&lt;/li&gt;
    &lt;li&gt;如果出现了Content-Length头字段，它的值表示entity-length（实体长度）和transfer-length（传输长 度）。如果这两个长度的大小不一样（i.e.设置了Transfer-Encoding头字段），那么将不能发送Content-Length头字段。并 且如果同时收到了Transfer-Encoding字段和Content-Length头字段，那么必须忽略Content-Length字段。&lt;/li&gt;
    &lt;li&gt;如果消息使用媒体类型“multipart/byteranges”，并且transfer-length 没有另外指定，那么这种自定界（self-delimiting）媒体类型定义transfer-length 。除非发送者知道接收者能够解析该类型，否则不能使用该类型。&lt;/li&gt;
    &lt;li&gt;由服务器关闭连接确定消息长度。（注意：关闭连接不能用于确定请求消息的结束，因为服务器不能再发响应消息给客户端了。）&lt;/li&gt;
&lt;/ul&gt;
为了兼容HTTP/1.0应用程序，HTTP/1.1的请求消息体中必须包含一个合法的Content-Length头字段，除非知道服务器兼容 HTTP/1.1。一个请求包含消息体，并且Content-Length字段没有给定，如果不能判断消息的长度，服务器应该用用400 (bad request) 来响应；或者服务器坚持希望收到一个合法的Content-Length字段，用 411 (length required)来响应。&lt;/p&gt;

&lt;p&gt;所有HTTP/1.1的接收者应用程序必须接受“chunked” transfer-coding (传输编码)，因此当不能事先知道消息的长度，允许使用这种机制来传输消息。消息不应该够同时包含 Content-Length头字段和non-identity transfer-coding。如果一个消息同时包含non-identity transfer-coding和Content-Length ，必须忽略Content-Length 。
&lt;h1&gt;5、HTTP头字段总结&lt;/h1&gt;
最后我总结下HTTP协议的头部字段。
&lt;ul&gt;
    &lt;li&gt;1、 Accept：告诉WEB服务器自己接受什么介质类型，&lt;em&gt;/&lt;/em&gt; 表示任何类型，type/* 表示该类型下的所有子类型，type/sub-type。&lt;/li&gt;
    &lt;li&gt;2、 Accept-Charset： 浏览器申明自己接收的字符集
Accept-Encoding： 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate）
Accept-Language：浏览器申明自己接收的语言
语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等。&lt;/li&gt;
    &lt;li&gt;3、 Accept-Ranges：WEB服务器表明自己是否接受获取其某个实体的一部分（比如文件的一部分）的请求。bytes：表示接受，none：表示不接受。&lt;/li&gt;
    &lt;li&gt;4、 Age：当代理服务器用自己缓存的实体去响应请求时，用该头部表明该实体从产生到现在经过多长时间了。&lt;/li&gt;
    &lt;li&gt;5、 Authorization：当客户端接收到来自WEB服务器的 WWW-Authenticate 响应时，用该头部来回应自己的身份验证信息给WEB服务器。&lt;/li&gt;
    &lt;li&gt;6、 Cache-Control：请求：no-cache（不要缓存的实体，要求现在从WEB服务器去取）
max-age：（只接受 Age 值小于 max-age 值，并且没有过期的对象）
max-stale：（可以接受过去的对象，但是过期时间必须小于 max-stale 值）
min-fresh：（接受其新鲜生命期大于其当前 Age 跟 min-fresh 值之和的缓存对象）
响应：public(可以用 Cached 内容回应任何用户)
private（只能用缓存内容回应先前请求该内容的那个用户）
no-cache（可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端）
max-age：（本响应包含的对象的过期时间）
ALL: no-store（不允许缓存）&lt;/li&gt;
    &lt;li&gt;7、 Connection：请求：close（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，断开连接，不要等待本次连接的后续请求了）。
keepalive（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，保持连接，等待本次连接的后续请求）。
响应：close（连接已经关闭）。
keepalive（连接保持着，在等待本次连接的后续请求）。
Keep-Alive：如果浏览器请求保持连接，则该头部表明希望 WEB 服务器保持连接多长时间（秒）。例如：Keep-Alive：300&lt;/li&gt;
    &lt;li&gt;8、 Content-Encoding：WEB服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。例如：Content-Encoding：gzip&lt;/li&gt;
    &lt;li&gt;9、Content-Language：WEB 服务器告诉浏览器自己响应的对象的语言。&lt;/li&gt;
    &lt;li&gt;10、Content-Length： WEB 服务器告诉浏览器自己响应的对象的长度。例如：Content-Length: 26012&lt;/li&gt;
    &lt;li&gt;11、Content-Range： WEB 服务器表明该响应包含的部分对象为整个对象的哪个部分。例如：Content-Range: bytes 21010-&lt;sup&gt;47021&lt;/sup&gt;&amp;frasl;&lt;sub&gt;47022&lt;/sub&gt;&lt;/li&gt;
    &lt;li&gt;12、Content-Type： WEB 服务器告诉浏览器自己响应的对象的类型。例如：Content-Type：application/xml&lt;/li&gt;
    &lt;li&gt;13、ETag：就是一个对象（比如URL）的标志值，就一个对象而言，比如一个 html 文件，如果被修改了，其 Etag 也会别修改，所以ETag 的作用跟 Last-Modified 的作用差不多，主要供 WEB 服务器判断一个对象是否改变了。比如前一次请求某个 html 文件时，获得了其 ETag，当这次又请求这个文件时，浏览器就会把先前获得的 ETag 值发送给WEB 服务器，然后 WEB 服务器会把这个 ETag 跟该文件的当前 ETag 进行对比，然后就知道这个文件有没有改变了。&lt;/li&gt;
    &lt;li&gt;14、 Expired：WEB服务器表明该实体将在什么时候过期，对于过期了的对象，只有在跟WEB服务器验证了其有效性后，才能用来响应客户请求。是 HTTP/1.0 的头部。例如：Expires：Sat, 23 May 2009 10:02:12 GMT&lt;/li&gt;
    &lt;li&gt;15、 Host：客户端指定自己想访问的WEB服务器的域名/IP 地址和端口号。例如：Host：rss.sina.com.cn&lt;/li&gt;
    &lt;li&gt;16、 If-Match：如果对象的 ETag 没有改变，其实也就意味著对象没有改变，才执行请求的动作。&lt;/li&gt;
    &lt;li&gt;17、 If-None-Match：如果对象的 ETag 改变了，其实也就意味著对象也改变了，才执行请求的动作。&lt;/li&gt;
    &lt;li&gt;18、 If-Modified-Since：如果请求的对象在该头部指定的时间之后修改了，才执行请求的动作（比如返回对象），否则返回代码304，告诉浏览器 该对象没有修改。例如：If-Modified-Since：Thu, 10 Apr 2008 09:14:42 GMT&lt;/li&gt;
    &lt;li&gt;19、 If-Unmodified-Since：如果请求的对象在该头部指定的时间之后没修改过，才执行请求的动作（比如返回对象）。&lt;/li&gt;
    &lt;li&gt;20、 If-Range：浏览器告诉 WEB 服务器，如果我请求的对象没有改变，就把我缺少的部分给我，如果对象改变了，就把整个对象给我。浏览器通过发送请求对象的 ETag 或者 自己所知道的最后修改时间给 WEB 服务器，让其判断对象是否改变了。总是跟 Range 头部一起使用。&lt;/li&gt;
    &lt;li&gt;21、 Last-Modified：WEB 服务器认为对象的最后修改时间，比如文件的最后修改时间，动态页面的最后产生时间等等。例如：Last-Modified：Tue, 06 May 2008 02:42:43 GMT&lt;/li&gt;
    &lt;li&gt;22、 Location：WEB 服务器告诉浏览器，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取。例如：Location：&lt;a href=&#34;http://i0.sinaimg.cn/dy/deco/2008/0528/sinahome_0803_ws_005_text_0.gif&#34;&gt;http://i0.sinaimg.cn/dy/deco/2008/0528/sinahome_0803_ws_005_text_0.gif&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;23、 Pramga：主要使用 Pramga: no-cache，相当于 Cache-Control： no-cache。例如：Pragma：no-cache&lt;/li&gt;
    &lt;li&gt;24、 Proxy-Authenticate： 代理服务器响应浏览器，要求其提供代理身份验证信息。Proxy-Authorization：浏览器响应代理服务器的身份验证请求，提供自己的身份信息。&lt;/li&gt;
    &lt;li&gt;25、 Range：浏览器（比如 Flashget 多线程下载时）告诉 WEB 服务器自己想取对象的哪部分。例如：Range: bytes=1173546-&lt;/li&gt;
    &lt;li&gt;26、 Referer：浏览器向 WEB 服务器表明自己是从哪个 网页/URL 获得/点击 当前请求中的网址/URL。例如：Referer：&lt;a href=&#34;http://www.sina.com/&#34;&gt;http://www.sina.com/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;27、 Server: WEB 服务器表明自己是什么软件及版本等信息。例如：Server：Apache/2.0.61 (Unix)&lt;/li&gt;
    &lt;li&gt;28、 User-Agent: 浏览器表明自己的身份（是哪种浏览器）。例如：User-Agent：Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.8.1.14) Gecko/20080404 Firefox/2、0、0、14&lt;/li&gt;
    &lt;li&gt;29、 Transfer-Encoding: WEB 服务器表明自己对本响应消息体（不是消息体里面的对象）作了怎样的编码，比如是否分块（chunked）。例如：Transfer-Encoding: chunked&lt;/li&gt;
    &lt;li&gt;30、 Vary: WEB服务器用该头部的内容告诉 Cache 服务器，在什么条件下才能用本响应所返回的对象响应后续的请求。假如源WEB服务器在接到第一个请求消息时，其响应消息的头部为：Content- Encoding: gzip; Vary: Content-Encoding那么 Cache 服务器会分析后续请求消息的头部，检查其 Accept-Encoding，是否跟先前响应的 Vary 头部值一致，即是否使用相同的内容编码方法，这样就可以防止 Cache 服务器用自己 Cache 里面压缩后的实体响应给不具备解压能力的浏览器。例如：Vary：Accept-Encoding&lt;/li&gt;
    &lt;li&gt;31、 Via： 列出从客户端到 OCS 或者相反方向的响应经过了哪些代理服务器，他们用什么协议（和版本）发送的请求。当客户端请求到达第一个代理服务器时，该服务器会在自己发出的请求里面添 加 Via 头部，并填上自己的相关信息，当下一个代理服务器收到第一个代理服务器的请求时，会在自己发出的请求里面复制前一个代理服务器的请求的Via 头部，并把自己的相关信息加到后面，以此类推，当 OCS 收到最后一个代理服务器的请求时，检查 Via 头部，就知道该请求所经过的路由。例如：Via：1.0 236.D0707195.sina.com.cn:80 (squid/2.6.STABLE13)&lt;/li&gt;&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;&lt;/ul&gt;&lt;/h1&gt;

&lt;p&gt;HTTP 请求消息头部实例：
Host：rss.sina.com.cn
User-Agent：Mozilla/5、0 (Windows; U; Windows NT 5、1; zh-CN; rv:1、8、1、14) Gecko/20080404 Firefox/2、0、0、14
Accept：text/xml,application/xml,application/xhtml+xml,text/html;q=0、9,text/plain;q=0、8,image/png,&lt;em&gt;/&lt;/em&gt;;q=0、5
Accept-Language：zh-cn,zh;q=0、5
Accept-Encoding：gzip,deflate
Accept-Charset：gb2312,utf-8;q=0、7,*;q=0、7
Keep-Alive：300
Connection：keep-alive
Cookie：userId=C5bYpXrimdmsiQmsBPnE1Vn8ZQmdWSm3WRlEB3vRwTnRtW &amp;amp;lt;&amp;ndash; Cookie
If-Modified-Since：Sun, 01 Jun 2008 12:05:30 GMT
Cache-Control：max-age=0
HTTP 响应消息头部实例：
Status：OK - 200 &amp;amp;lt;&amp;ndash; 响应状态码，表示 web 服务器处理的结果。
Date：Sun, 01 Jun 2008 12:35:47 GMT
Server：Apache/2、0、61 (Unix)
Last-Modified：Sun, 01 Jun 2008 12:35:30 GMT
Accept-Ranges：bytes
Content-Length：18616
Cache-Control：max-age=120
Expires：Sun, 01 Jun 2008 12:37:47 GMT
Content-Type：application/xml
Age：2
X-Cache：HIT from 236-41、D07071951、sina、com、cn &amp;amp;lt;&amp;ndash; 反向代理服务器使用的 HTTP 头部
Via：1.0 236-41.D07071951.sina.com.cn:80 (squid/2.6.STABLE13)
Connection：close&lt;/p&gt;

&lt;p&gt;本节摘自：&lt;a href=&#34;http://ynhu33.blog.51cto.com/412835/408801&#34;&gt;http://ynhu33.blog.51cto.com/412835/408801&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;——最后我想说：“怪自己学艺不精，浪费了一次机会（而且是我最想进的公司）”&lt;/p&gt;

&lt;p&gt;希望老天再给我一次机会。&lt;/p&gt;

&lt;p&gt;PS：还有一点加速了我的死亡，我学习过&lt;a href=&#34;http://www.cnblogs.com/skynet/category/241385.html&#34; target=&#34;_blank&#34;&gt;Android开发&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;但是用的是JAVA，经理说研究Android开发就得用NDK，那才是核心。&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;
&lt;div id=&#34;MySignature&#34;&gt;&lt;/p&gt;

&lt;p&gt;作者：吴秦
出处：&lt;a href=&#34;http://www.cnblogs.com/skynet/&#34;&gt;http://www.cnblogs.com/skynet/&lt;/a&gt;
本文基于&lt;a href=&#34;http://creativecommons.org/licenses/by/2.5/cn/&#34; target=&#34;_blank&#34;&gt;署名 2.5 中国大陆&lt;/a&gt;许可协议发布，欢迎转载，演绎或用于商业目的，但是必须保留本文的署名&lt;a href=&#34;http://www.cnblogs.com/skynet/&#34; target=&#34;_blank&#34;&gt;吴秦&lt;/a&gt;（包含链接）.&lt;/p&gt;

&lt;p&gt;—————————————————————————————————————————————————————————————————&lt;/p&gt;

&lt;p&gt;全文到此为止。。。&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu与windows间的远程桌面、共享文件访问</title>
      <link>http://www.daniex.tk/blog/2011/between-ubuntu-and-windows-remote-desktop-shared-file-access/</link>
      <pubDate>Mon, 07 Mar 2011 12:10:16 &#43;0000</pubDate>
      <author>Daniex</author>
      <guid>http://www.daniex.tk/blog/2011/between-ubuntu-and-windows-remote-desktop-shared-file-access/</guid>
      <description>&lt;p&gt;1、 Ubuntu访问windows&lt;/p&gt;

&lt;p&gt;这方面基本上Ubuntu系统上做的已经很全了，现有的应用用起来就行。远程桌面可以用Remote Desktop Viewer和Terminal Server Client两个应用。都在Applications-&amp;gt;Internet目录下。有俩截图如下：&lt;img class=&#34;aligncenter&#34; title=&#34;RDV&amp;amp;TSC&#34; src=&#34;http://farm6.static.flickr.com/5178/5505991350_930ecf16d2.jpg&#34; alt=&#34;应用位置&#34; width=&#34;473&#34; height=&#34;345&#34; /&gt;&lt;/p&gt;

&lt;p&gt;两个应用的界面分别为：&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; title=&#34;Remote Desktop Viewer&#34; src=&#34;http://farm6.static.flickr.com/5219/5505991512_3b0b3e514f.jpg&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;409&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; title=&#34;Terminal Server Client&#34; src=&#34;http://farm6.static.flickr.com/5171/5505394227_3a37ef989a.jpg&#34; alt=&#34;&#34; width=&#34;373&#34; height=&#34;500&#34; /&gt;
&lt;p id=&#34;best-answer-content&#34;&gt;PS:&lt;/p&gt;
VNC (Virtual Network Computing)是虚拟网络计算机的缩写。VNC是一款优秀的远程控制工具软件，由著名的AT&amp;amp;T的欧洲研究实验室开发的。
&lt;p id=&#34;best-answer-content&#34;&gt;RDP:远程桌面协议，主要用于windows 2000及更早的windows版本。 RDPv5支持xp等。&lt;/p&gt;
&lt;p id=&#34;best-answer-content&#34;&gt;SSH: Secure Shell Protocol，是一种在不安全网络上提供安全远程登录及其它安全网络服务的协议。&lt;/p&gt;
共享文件的访问有另外一个应用，这个应用能进行FTP，http的访问。位于Places-&amp;gt;connect to server。&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; title=&#34;connect to server&#34; src=&#34;http://farm6.static.flickr.com/5172/5505991388_9e08508c3b.jpg&#34; alt=&#34;&#34; width=&#34;344&#34; height=&#34;423&#34; /&gt;&lt;/p&gt;

&lt;p&gt;界面如下；&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; title=&#34;connect to server&#34; src=&#34;http://farm6.static.flickr.com/5135/5505394145_dbbf6594d4.jpg&#34; alt=&#34;&#34; width=&#34;369&#34; height=&#34;358&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2、windows访问ubuntu。Ubuntu互访。&lt;/p&gt;

&lt;p&gt;公司不准私自架设ftp等服务器。所以通常通过文件共享。Linux也可以类似window那样共享文件，只是Ubuntu需要先安装应用。&lt;/p&gt;

&lt;p&gt;Windows和Linux间共享可以用samba。Linux和Linux之间共享文件有更好的网络文件系统NFS。网上使用教程方法很多，这里就不多说了。&lt;/p&gt;

&lt;p&gt;再废话一句，linux里很多可以用mount。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SNMP简单网络管理协议（Simple Network Management Protocol）</title>
      <link>http://www.daniex.tk/blog/2010/simple-network-management-protocol-snmp-simple-network-management-protocol/</link>
      <pubDate>Wed, 03 Nov 2010 13:40:52 &#43;0000</pubDate>
      <author>Daniex</author>
      <guid>http://www.daniex.tk/blog/2010/simple-network-management-protocol-snmp-simple-network-management-protocol/</guid>
      <description>&lt;p&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;strong&gt;SNMP历史&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;随着网络数目与网络内主机数目的日益增多，单纯依靠一些网络专业进行网络管理已经不可能了，必须有一种通行的网络管理标准以及相应的管理工具使普通人也能够管理网络。第一个相关的协议是SGMP，它提供了一种直接监视网关的方法，也因此成了一种通用的网络管理工具。下来，有三种可供选择的管理工具：HEMS，SNMP和建立在TCP/IP基础上的CMIP（CMOT），因为需要使用ISO/OSI模型进行网络管理，SNMP首选CMOT作为管理工具。基本的SNMP已经被广泛使用了，所有的网络产品都提供对SNMP的支持，新开发的具有远程管理能力的SNMP是RMON，它使管理人员可以将整个子网进行管理，而不是对整个子网内的设备进行管理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;一些定义&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SNMP&lt;/strong&gt;，Simple Network Management Protocol：简单网络管理协议  它是一个标准的用于管理IP网络上结点的协议。此协议包括了监视和控制变量集以及用于监视设备的两个数据格式：SMI和MIB。
&lt;strong&gt;MIB&lt;/strong&gt;，Management Information Base：管理信息库  由网络管理协议访问的管理对象数据库，它包括SNMP可以通过网络设备的SNMP管理代理进行设置的变量。
&lt;strong&gt;SMI&lt;/strong&gt;，Structure of Management Information：管理信息结构  用于定义通过网络管理协议可访问的对象的规则。SMI定义在MIB中使用的数据类型及网络资源在MIB中的名称或表示。
&lt;strong&gt;ASN.1&lt;/strong&gt;，Abstract Syntax Notation One：抽象语法定义  用于定义语法的正式语言，在SNMP中它用于定义SNMP协议数据单元和对象的格式。
&lt;strong&gt;PDU&lt;/strong&gt;，Protocol Data Unit：协议数据单元  在网络中传送的数据包。
&lt;strong&gt;BER&lt;/strong&gt;，basic encoding rules：基本编码规则  由CCITT (X.209)和ISO (ISO 8825)指定的编码规则，它描述了如何将ASN.1类型表示为字符串。
&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;随着网络技术的飞速发展，网络的数量也越来越多。而网络中的设备来自各个不同的厂家，如何管理这些设备就变得十分重要。本章的内容就是介绍管理这些设备的标准。基于T C P / I P的网络管理包含两个部分：网络管理站（也叫管理进程， m a n a g e r）和被管的网络单元（也叫被管设备） 。被管设备种类繁多，例如：路由器、 X 终端、终端服务器和打印机等。这些被管设备的共同点就是都运行 T C P / I P协议。被管设备端和管理相关的软件叫做代理程序( a g e n t )或代理进程。管理站一般都是带有彩色监视器的工作站，可以显示所有被管设备的状态(例如连接是否掉线、各种连接上的流量状况等 )。&lt;/p&gt;

&lt;p&gt;管理进程和代理进程之间的通信可以有两种方式。一种是管理进程向代理进程发出请求，询问一个具体的参数值（例如：你产生了多少个不可达的 I C M P端口？） 。另外一种方式是代理进程主动向管理进程报告有某些重要的事件发生（例如：一个连接口掉线了） 。当然，管理进程除了可以向代理进程询问某些参数值以外，它还可以按要求改变代理进程的参数值（例
如：把默认的IP TTL值改为6 4） 。&lt;/p&gt;

&lt;p&gt;基于T C P / I P的网络管理包含3个组成部分：&lt;/p&gt;

&lt;p&gt;1) 一个管理信息库M I B（Management Information Base） 。管理信息库包含所有代理进程的所有可被查询和修改的参数。RFC 1213 [McCloghrie and Rose 1991]定义了第二版的M I B，叫做M I B - I I。&lt;/p&gt;

&lt;p&gt;2)  关于M I B的一套公用的结构和表示符号。叫做管理信息结构 S M I（Structure of Management Information） 。这个在RFC 1155 [Rose and McCloghrie 1990] 中定义。例如：S M I定义计数器是一个非负整数，它的计数范围是 0~4 294 967 295，当达到最大值时，又从0开始计数。&lt;/p&gt;

&lt;p&gt;3) 管理进程和代理进程之间的通信协议，叫做简单网络管理协议 S N M P（Simple Network Management Protocol） 。在RFC 1157 [Case et al. 1990]中定义。S N M P包括数据报交换的格式等。尽管可以在运输层采用各种各样的协议，但是在 S N M P中，用得最多的协议还是U D P。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;strong&gt;协议&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;关于管理进程和代理进程之间的交互信息， S N M P定义了5种报文：&lt;/p&gt;

&lt;p&gt;1)  g e t - r e q u e s t操作：从代理进程处提取一个或多个参数值。&lt;/p&gt;

&lt;p&gt;2)  g e t - n e x t - r e q u e s t操作：从代理进程处提取一个或多个参数的下一个参数值（关于“下一个（n e x t） ”的含义将在后面的章节中介绍） 。&lt;/p&gt;

&lt;p&gt;3)  s e t - r e q u e s t操作：设置代理进程的一个或多个参数值。&lt;/p&gt;

&lt;p&gt;4)  g e t - r e s p o n s e操作：返回的一个或多个参数值。这个操作是由代理进程发出的。它是前面3中操作的响应操作。&lt;/p&gt;

&lt;p&gt;5) t r a p操作：代理进程主动发出的报文，通知管理进程有某些事情发生。前面的3个操作是由管理进程向代理进程发出的。后面两个是代理进程发给管理进程的。&lt;/p&gt;

&lt;p&gt;简单介绍一下用法&lt;/p&gt;

&lt;p&gt;snmputil，就是程序名拉，呵呵。&lt;/p&gt;

&lt;p&gt;get，就理解成获取一个信息。&lt;/p&gt;

&lt;p&gt;getnext，就理解成获取下一个信息。&lt;/p&gt;

&lt;p&gt;walk，就理解成获取一堆信息（嗯，应该说所有数据库子树/子目录的信息）&lt;/p&gt;

&lt;p&gt;agent，具体某台机器拉。&lt;/p&gt;

&lt;p&gt;community，嗯就是那个“community strings”“查询密码”拉。&lt;/p&gt;

&lt;p&gt;oid，这个要多说一下，这个呢，就是物件识别代码（Object Identifier）。&lt;/p&gt;

&lt;p&gt;可以把oid理解成MIB管理信息库中各种信息分类存放树资源的一个数字标识。&lt;/p&gt;

&lt;p&gt;好了，具体的资料可以查阅相关文章。&lt;/p&gt;

&lt;p&gt;开始刺探信息：&lt;/p&gt;

&lt;p&gt;尝试获得对方机器当前进程列表&lt;/p&gt;

&lt;p&gt;snmputil.exe walk 对方ip public .1.3.6.1.2.1.25.4.2.1.2&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;SNMP的三大版本 &lt;/span&gt;&lt;/strong&gt;
SNMP的常用版本有三个：SNMPv1、SNMPv2、SNMPv3
Three different version of SNMP exist: SNMPv1 (RFC’s 1155, 1157, and 1212), SNMPv2c (RFC’s 1901 through 1908), and SNMPv3 (RFC’s 3411 though 3418). The co-existence of all three versions are detailed in RFC 3584.&lt;/p&gt;

&lt;p&gt;SNMP有三个不同的版本：SNMPv1(RFC 1155、RFC 1157、RFC 1212),SNMPv2c (RFC 1901、1908）以及 SNMPv3 (RFC 3411 - 3418). RFC 3584中详细说明了这三种版本同时共存方面的信息。&lt;/p&gt;

&lt;p&gt;SNMPv1 is the original standard for community based management. SNMPv2 was derived from the SNMPv1 framework but had no message definition, which was later revamped aa SNMPv2c, a community based version of SNMPv2 with a message format similar to SNMPv1. SNMPv2 added several new datatypes (Counter32, Counter64, Gauge32, UInteger32, NsapAdress, and BIT STRING), as well as enhancements to OID tables and the setting of OID values. SNMPv3 is an extensable SNMPv2 framework with a new message format, ACL and security abilities, and remote configuration of SNMP parameters.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #808080;&#34;&gt;SNMPv1是为基于公共管理的初始标准。SNMPv2是SNMPv1框架下衍生出来的，但是没有定义信息，其后修订为SNMPv2c,一个带有于SNMPv1类似信息格式的给予公共管理的版本。SNMPv2添加了几个新的数据类型（Counter32、Counter64、Gauge32、UInteger32、NsapAdress 以及BIT STRING),以及对OID表和OID值的设置的增强。SNMPv3是一个带有新的信息格式、ACL、安全功能和远处SNMP参数配置的、扩展了SNMPv2框架的版本。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;SNMP is based on several other standards including the Abstract Syntax Notation 1 Basic Encoding Rules (ASN.1 BER) which defines the SNMP used Datatypes and the Structure of Management Information (SMI) which details the grammar used by SNMP MIBs. SMI comes in two varieties: SMIv1 (RFC 1155) and SMIv2 (RFC 2578). SMIv1 is now obsolete and should not be used. If you choose to modify MIBs at some point you’ll need to learn SMIv2 and ASN.1 syntax, but otherwise they are interesting but unnecessary to learn.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;span style=&#34;color: #808080;&#34;&gt;SNMP是基于几个其他规范的，包括定义给予SNMP的数据类型的ASN.1 BER(Abstract Syntax Notation 1 Basic Encoding Rules), 以及详细描述有SNMP MIB使用的语法的管理信息结构（SMI）。SMIv1目前被独立出来，不应当再被使用。如果你选择修改MIB的某些东西，你需要学习SMIv2和ASN.1语法，不过其他情况下你只需要在兴趣时看看他，而不&lt;span style=&#34;color: #808080;&#34;&gt;必学习他&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color: #808080;&#34;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;To this day, SNMPv1 and SNMPv2c are the most commonly used, however due to the insecurity inherent to these protocols read-only access is typical. In general, don’t bother with SNMPv3 unless you really need the added security features.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #808080;&#34;&gt;现在，SNMPv1和SNMPv2被广泛应用，但是由于这些协议的不安全特性，通常只使用只读访问。通常，除非你确实需要附加安全特性，否则你不需要过多地关注SNMPv3。SNMPv3是具有安全性的通信协议。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;strong&gt;简单介绍一下用法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;以WIN2K来说，一旦安装并启动了简单网络管理协议，系统将打开&lt;/p&gt;

&lt;p&gt;UDP 161 snmp&lt;/p&gt;

&lt;p&gt;UDP 162 snmptrap&lt;/p&gt;

&lt;p&gt;两个端口。&lt;/p&gt;

&lt;p&gt;具体做什么我们不去细究。需要注意的是，这里使用的是UDP端口，而不是TCP端口。同时，WIN2K系统支持初始的“查询密码”community strings 为：public 我们只要通过一款Resource Kit里面的工具snmputil，就可以方便的获得非常多的信息。&lt;/p&gt;

&lt;p&gt;在这里可以下载：&lt;a href=&#34;http://www.patching.net/abu/tools/win/snmputil.exe&#34;&gt;http://www.patching.net/abu/tools/win/snmputil.exe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;snmputil，程序名。&lt;/p&gt;

&lt;p&gt;get，就理解成获取一个信息。&lt;/p&gt;

&lt;p&gt;getnext，就理解成获取下一个信息。&lt;/p&gt;

&lt;p&gt;walk，就理解成获取一堆信息（应该说所有数据库子树/子目录的信息）&lt;/p&gt;

&lt;p&gt;agent，具体某台机器拉。&lt;/p&gt;

&lt;p&gt;community，嗯就是那个“community strings”“查询密码”。&lt;/p&gt;

&lt;p&gt;oid，物件识别代码（Object Identifier）。&lt;/p&gt;

&lt;p&gt;可以把oid理解成MIB管理信息库中各种信息分类存放树资源的一个数字标识。&lt;/p&gt;

&lt;p&gt;具体的资料可以查阅相关文章。&lt;/p&gt;

&lt;p&gt;开始刺探信息：&lt;/p&gt;

&lt;p&gt;尝试获得对方机器当前进程列表&lt;/p&gt;

&lt;p&gt;snmputil.exe walk 对方ip public .1.3.6.1.2.1.25.4.2.1.2&lt;/p&gt;

&lt;p&gt;尝试获得对方机器系统用户列表&lt;/p&gt;

&lt;p&gt;snmputil walk 对方ip public .1.3.6.1.4.1.77.1.2.25.1.1&lt;/p&gt;

&lt;p&gt;snmputil walk 对方ip public .1.3.6.1.2.1.25.4.2.1.2 列出系统进程&lt;/p&gt;

&lt;p&gt;snmputil walk 对方ip public .1.3.6.1.4.1.77.1.2.25.1.1 列系统用户列表&lt;/p&gt;

&lt;p&gt;snmputil get 对方ip public .1.3.6.1.4.1.77.1.4.1.0 列出域名&lt;/p&gt;

&lt;p&gt;snmputil walk 对方ip public .1.3.6.1.2.1.25.6.3.1.2 列出安装的软件&lt;/p&gt;

&lt;p&gt;snmputil walk 对方ip public .1.3.6.1.2.1.1 列出系统信息&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;来源：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/scottckt/archive/2007/07/30/836309.html&#34;&gt;http://www.cnblogs.com/scottckt/archive/2007/07/30/836309.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.longen.org/s-z/details-z/snmpintro.htm&#34;&gt;http://www.longen.org/s-z/details-z/snmpintro.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bbs.cunzone.com/thread-32414-1-1.html&#34;&gt;http://bbs.cunzone.com/thread-32414-1-1.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以及TCP/IP详解&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>比B2 Gmail Notifier更厉害Spiffy – 多 Gmail 邮箱通知工具，支持 Apps</title>
      <link>http://www.daniex.tk/blog/2010/spiffy/</link>
      <pubDate>Mon, 16 Aug 2010 06:05:48 &#43;0000</pubDate>
      <author>Daniex</author>
      <guid>http://www.daniex.tk/blog/2010/spiffy/</guid>
      <description>&lt;p&gt;上一篇才讲gmail邮件通知的问题，今天一看&lt;a href=&#34;http://www.appinn.com/&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: #3366ff;&#34;&gt;小众&lt;/span&gt;&lt;/a&gt;，来了个更厉害的Spiffy。&lt;a href=&#34;http://www.appinn.com/spiffy/&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: #3366ff;&#34;&gt;看小众软件的介绍&lt;/span&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.appinn.com/spiffy/&#34;&gt;&lt;span style=&#34;color: #3366ff;&#34;&gt;Spiffy&lt;/span&gt;&lt;/a&gt; 是款 Gmail 邮箱通知工具，支持最多 5 个 Gmail 邮箱或 Google Apps 邮箱。解决了B2 Gmail Notifier的不支持多账号问题。&lt;/p&gt;

&lt;p&gt;Gmail 本身变相提供同时管理多个邮箱的功能，你只需将其他邮箱的邮件转发至主 Gmail 邮箱，并设置主邮箱可以通过其他邮箱地址发邮件即可。另外 Gmail 最近也开始提供多邮箱管理功能了。但转发的操作将造成主邮箱的混乱及空间的不足，虽然可以通过 label 和购买额外空间（$5=20G/年）解决。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>跨平台的gmail桌面通知工具 B2 Gmail Notifier</title>
      <link>http://www.daniex.tk/blog/2010/cross-platform-gmail-desktop-notification-tool-b2-gmail-notifier/</link>
      <pubDate>Fri, 13 Aug 2010 01:32:55 &#43;0000</pubDate>
      <author>Daniex</author>
      <guid>http://www.daniex.tk/blog/2010/cross-platform-gmail-desktop-notification-tool-b2-gmail-notifier/</guid>
      <description>&lt;p&gt;浏览器里开了个Gmail，离开浏览器做其他事的时候，时常忘了去查看邮箱。又不想将Gmail放到ThunderBird，OutLook之类的软件里。于是想到找找有没有Gmail的桌面提示工具。发现有两种方式，一是Google Desktop工具，功能很强劲，有很多小工具。还有一个方法就是B2 Gmail Notifier。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://home.b2labs.com/b2-gmail-notifier-freeware-animated-gmail-notifier&#34; target=&#34;_blank&#34;&gt;B2 Labs制作的Gmail Notifier &lt;/a&gt;是一款跨平台（Windows/Mac/Linux）的Gmail邮件提示小工具，因为它基于Adobe的AIR技术。它可以在你的桌面提示收到的新邮件，可以直接看到发信人、标题、正文和发送时间，而且有多种动态效果可选，还可以在线安装更多效果。不支持多帐号。&lt;/p&gt;

&lt;p&gt;安装文件很小，不到2M，就算加上12M的Adobe Air安装文件还是很小。Google Desktop数百M，多装些小工具有可能就几G了。&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-445&#34; title=&#34;20100813092206461&#34; src=&#34;http://hostill.com/~daniex/wp-content/uploads/2010/08/20100813092206461.png&#34; alt=&#34;&#34; width=&#34;268&#34; height=&#34;266&#34; /&gt;提示框后面有个txt文件，它偷偷地露了个头。 - -！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>企业管理的采购管理及采购流程技巧</title>
      <link>http://www.daniex.tk/blog/2010/purchasing-management/</link>
      <pubDate>Thu, 08 Jul 2010 04:16:38 &#43;0000</pubDate>
      <author>Daniex</author>
      <guid>http://www.daniex.tk/blog/2010/purchasing-management/</guid>
      <description>&lt;p&gt;现代企业面临着需求多样化和个性化的双重挑战，需要物料的采购和供应环节能够满足生产过程对物料柔性（多样化）和刚性（质量）的需求。对于制造企业而 言，为销售而生产、为生产而采购是一个环环相扣的物料输入输出动态过程，依次构成了采购流程、生产流程和销售流程。从物流角度看，最初的采购流程运行的成 功与否将直接影响到企业生产、销售的最终产品的定价情况和整个供应链的最终获利情况。企业的采购流程的“龙头”作用不容忽视。&lt;/p&gt;

&lt;p&gt;然而，当今不少企业采购流程却不尽科学、采购机制不尽合理，不利于生产和销售，必须用IT技术加以解决。信息不畅和采购模式落后是企业采购存在的根本问题。由于体制、机制等方面的原因，传统采购存在着许多与现代采购要求不相容的地方，影响了采购的效率和有效性，主要包括：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;信息不能共享。&lt;/strong&gt;由于组织之间信息私有化、未经集成，采购信息没有实现有效共享，包括采购方与供应方之间、企业采购部门与相关部门之间以及管理者与实施 者之间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;采供双方未建立稳定的协作关系。&lt;/strong&gt;这是旧的采购模式造成的，它们以临时的或短期的合作机制为主，造成了竞争多于合作，进而导致了采购过程的不确定性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;与预测和物料需求计划结合不紧&lt;/strong&gt;，即不能有效根据生产需要组织采购，实现物料的供应计划与当前需求的平衡，并与企业的库存投资和策略相一致。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;无法跟踪采购情况&lt;/strong&gt;，包括请购单处理、采购单处理、询价单报价单处理；运输处理、收货处理、质量控制等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;缺乏制约&lt;/strong&gt;（采购事务的授权、签发、批准、执行和纪录没有进行职务分类），容易导致暗箱操作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;缺乏对供应商的评价和管理&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;总之，由于不通畅的信息以及落后的采购模式，在市场需求发生变化时，采购方不能改变已经提供给供应方的采购合同，企业响应用户需求的能力迟钝。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;协同采购——解决采购问题的有效模式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;传统的采购模式不能适应现代企业发展的要求，必须用新的采购模式――协同采购取而代之。这种新型采购模式采取供应链管理策略，改进了与供应商之间的关系，强调协同的理念，而且，随着采购的品种、数量和频率的增加，协同 的作用将越发明显，包括：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;企业内部协同&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;企业要实施高效的采购行为，需要企业内部各业务部门的协同配合，包括设计开发部门、生产部门、销售部门、财务部门等，并适时进行相关数据的维护，如物料、 供应商、采购价格等，只有这样才能以合理的价格采购到所需的物料、合适的数量并实施正确的交付。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;企业与外部的协同&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;采购不仅需要企业内部的协同，更需要与外部的协同，即与供应商在库存、需求等方面信息的共享。企业可以根据供应链的供应情况调整计划及执行的过程。同 时，供应商可以根据企业的库存、计划等信息调整供应计划。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现从“为库存采购”到“为订单采购”的转化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在供应链管理条件下，采购活动以订单驱动方式进行，这种方式可以准时响应客户的需求，降低库存成本，进而改变了传统的以库存补充为目的的采购模式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 加强对外部资源的管理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有效的外部资源管理可以建立一种新的不同层次的供应网络，减少供应商数量，与供应商建立一种长期的、互惠的合作关系，进而摒弃传统采购管理的不足：缺 乏合作、缺乏柔性和对需求的快速响应能力。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IT技术为采购问题的解决提供了强有力工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有效利用协同采购模式解决企业管理中的采购问题，必须依赖于强有力的技术手段。IT技术与先进管理模式（特别是ERP）的结合有效解决了采购问题。据统计，IT技术的应用通常能够获得5％～40％的总节约，而典型的成本下降范围是15%～20％。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;设置流畅的采购流程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;采购流程包含了为生产需要而选择供应商并购买物料所涉及活动的业务过程。通畅的业务流程是保障高效采购的基础，它应具备优化、无冗余、并行作业的基本 属性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;搭建合理的组织结构&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;优秀的采购流程需要有相应的组织结构来支撑，这种组织结构应是扁平化的，并支持先进的采购模式，如集中采购、分布式采购等。&lt;/p&gt;

&lt;p&gt;对采购数据实施管理是信息快速传递、共享的基础。采购数据主要包括物料数据、供应商数据和采购价格数据。应该建立对采购数据的唯一性录入、动态更新和 维护的机制。健全的采购数据可以快速地寻找并评价供应商、询购、形成采购订单、审批、跟踪采购情况。图3是利用采购数据快速形成采购订单的过程。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://daniex.info/purchasing-management.html/attachment/20100708115504280&#34; rel=&#34;attachment wp-att-202&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-202&#34; title=&#34;20100708115504280&#34; src=&#34;http://hostill.com/~daniex/wp-content/uploads/2010/07/20100708115504280.png&#34; alt=&#34;&#34; width=&#34;503&#34; height=&#34;326&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 与相关业务功能集成&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;物料采购与销售、生产、库存、财务、质检、供应等多个业务环节紧密相关，需要得到相关部门的配合。因此，数据的共享和业务的集成对于实施协同采购模 式是必须的和基本的。如图4可以看出采购与销售、物料管理、财务的集成机制。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://daniex.info/purchasing-management.html/attachment/20100708115539717&#34; rel=&#34;attachment wp-att-203&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-203&#34; title=&#34;20100708115539717&#34; src=&#34;http://hostill.com/~daniex/wp-content/uploads/2010/07/20100708115539717.png&#34; alt=&#34;&#34; width=&#34;497&#34; height=&#34;375&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 基于IT应用的几种优秀采购方式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IT技术在企业采购的广泛应用，为开发新型、高效的采购方式提供了可能，这些采购方式的应用对提高采购效率效果将发挥重要而深远的作用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;集中采购&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;集中采购是相对分散采购而言的，即采购组织为多个企业实施采购，这种形式适用于集团企业。如惠普公司运用信息技术重建采购流程，总公司与各制造企业使 用一个共同的采购软件系统，虽然各部门仍然像过去那样自己订货，但因为使用了统一的标准的采购系统，总部可以全面掌握需求情况，并派采购部与供应商谈判， 签订总合同，大大降低了采购成本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;全球采购&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;全球采购在地理上更加拓展了集中采购的范畴，它打破和淡化了时间、空间的限制，实现了跨国间的询价、报价、样品传递、订单下达、关税上报等操作，企业 可以在全世界范围内寻找原材料和零部件来源。这种采购形式是企业间相互依赖、相互作用和相互制约特征日渐明显的产物，满足了大型企业全球化战略的要求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在线采购&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作为全球采购的具体形式，在线采购为采购人员提供了一个快速降低采购成本的系统工具，即通过Internet可以在全球范围内即时地同供应商进行通信 和交易。在线采购将作为采购商和供应商“双赢”的新型采购形式，主要有卖方系统、买方系统和第三方系统3种形式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;准时采购&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;准时采购是为适应准时生产系统（JIT）的需要而形成的，即供应商有能力“在需要的时候，向需要的地点，以可靠的质量，向生产企业提供需要的物料”。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://daniex.info/purchasing-management.html/attachment/20100708115553131&#34; rel=&#34;attachment wp-att-204&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-204&#34; title=&#34;20100708115553131&#34; src=&#34;http://hostill.com/~daniex/wp-content/uploads/2010/07/20100708115553131.png&#34; alt=&#34;&#34; width=&#34;503&#34; height=&#34;375&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;信息来源：赛迪评测&lt;/p&gt;

&lt;p&gt;作者：赛迪评测信息化方案评估中心 叶宜强&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>中小企业采购特点分析</title>
      <link>http://www.daniex.tk/blog/2010/corporate-purchasing-features/</link>
      <pubDate>Tue, 29 Jun 2010 08:50:02 &#43;0000</pubDate>
      <author>Daniex</author>
      <guid>http://www.daniex.tk/blog/2010/corporate-purchasing-features/</guid>
      <description>&lt;p&gt;看到一篇文章谈中小企业采购流程的若干特点，一条一条罗列地挺到位的。原文偏重IT采购，主要指软件、IT服务的采购。在这里我联系18省项目宗旨，转述的同时加入些个人理解，不足处烦请指正。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、采购规模较为有限&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;据统计，在有一定信息化基础的中小企业，信息化投资规模不等，平均IT投资为25万人民币。其中47%的投资在硬件和网络设备，20%投资在软件和解决方案，其余为IT服务。但投资与采购重点已渐从硬件、网络采购转向软件、服务及外包等方面。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;PS：&lt;/span&gt;18省主要面向信息化程度较高的一批中小企业。这部分企业在信息化建设上投入相对较高，并且其侧重点已从基本的硬件采购向软件，服务采购方向转移。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、对产品价格非常敏感&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;中小型企业因其规模小，资金匮乏，企业生存也不太稳定，企业老总对于成本的控制相对更严格，普遍注重短期投资回报率，信息化投入非常谨慎，使得它们对价格非常敏感，价格是中小企业IT采购的主要因素。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;PS：&lt;/span&gt;网络上商品明码标价，价格比对更为方便，对于企业采购估计提供极大便利，采购方在市场上占有有利地位。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3、IT采购决定权于老总&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;中小企业意志集中于老板身上，如果老板认为不需要，那么产品在中小企业中就很难推广开，也谈不上采购建设。因此首先让产品符合老板要求，说服老板应用；其次，要保证顺利推广、被采用，搞好公关营销非常重要，做好客情关系，获得老板的好感，其余就迎刃而解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、采购计划时间多在年终岁首&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;虽然中小企业IT采购资金年分布不均衡，规律不明显，但多集中在年终岁首进行规划、采购，在这段时间内制定发展规划、扩大规模、招聘人员等，其中购置更多、更新的IT设备成为其中一项重要的工作。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;PS：&lt;/span&gt;年终岁首规划性采购会增加，并且伴随年终的福利采购，但日常的采购消费也不容忽视。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5、采购流程较为简捷&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;中小企业信息化采购时，通常的流程是由业务部门提出申请，IT专业人员填报年度或临时采购预算计划，报主管领导、公司领导审批后实施，甚至老板一句话拍板定案。有较大的随机性，没有太过繁琐的审批及采购流程。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;PS：&lt;/span&gt;简单的流程不一定高效，也不代表规范。18省提供中小企业采购管理平台，能在中小企业简单的采购流程基础上进行规范化管理，让企业主更通透的监督整个采购流程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6、较强的个性化应用需求&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;中小企业IT应用存在着行业、地区、水平上的差异，不同行业、不同规模的中小企业在信息化建设的不同阶段有着不同的需求，不能套用大型企业的标准化产品来实施。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7、采购信息渠道多种多样&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在IT比较发达的地区，中小企业在采购信息化产品时，信息获取的主要渠道是通过当地IT厂商上门自荐完成。部分中小企业则是通过网络、展会、平面广告等来获取信息。目前互联网越来越成为中小企业获取IT信息的主渠道。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;PS：&lt;/span&gt;互联网上能获取广泛的采购信息，是信息流量最大的渠道。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8、倾向于全价值链解决方案&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;中小企业不仅仅希望厂商提供单一的产品和技术，更渴望得到高性价比的全面解决之道，不但能为其提供实用易用、性价比高的产品，同时还能提供完整良好的售后服务、咨询培训，以购买打包产品、服务为主要需求特征。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;PS：&lt;/span&gt;为中小企业提供全方位的服务这个发展方向，是众多企业追求的目标。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9.“傻瓜产品”最受青眯&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;产品是否具备“简单、易用、快捷”等特点是中小企业信息化建设、IT采购的重要关注点。中小企业其实并不需要配备结构复杂、使用繁琐的IT产品，初次采购成本低廉、性能稳定、易用通用、容易维护的IT产品才是他们最为需要的。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;PS：&lt;/span&gt;中小企业讲究高效，实用，这是大多产品追求的目标。在中小企业这个应用背景中，对简单易用的需求发展到一种极致。好比石器时代拿來一块立马用得上的石头，他不要你的打磨工具，哪怕是免费的都不要！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10.采购制度日益健全&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;目前中小企业在重大项目投资、采购上，日益走上制度化轨道，制度逐渐健全，向大型企业或政府机关看齐。主要采购策略有询价采购和公开招标两种方式。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;PS：&lt;/span&gt;企业不断的发展过程中，各种流程的规范化是随之进行的，一个不能适应企业发展的产品终将被淘汰，企业需要一个能帮助他们走向规范化的产品。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11.逐步采用外包方式进行IT建设&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于流程简单、应用单一的中小企业来说，不可能选择使用复杂度高、使用难度大而又昂贵的产品，它们越来越倾向于依靠IT厂商所提供的社会化、专业化的IT外包服务来进行IT建设，以降低IT采购成本、管理成本和维护成本。&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;PS：&lt;/span&gt;在降低成本、管理成本、维护成本的需求下，不仅仅IT采购，其他生产资料等非企业核心产品的采购，都可以用外包的方式交给专业公司。让企业能够更加专注于自己的领域不断发展。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://daniex.info/corporate-purchasing-features.html/cg&#34; rel=&#34;attachment wp-att-108&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-108&#34; title=&#34;采购&#34; src=&#34;http://hostill.com/~daniex/wp-content/uploads/2010/06/cg.jpg&#34; alt=&#34;&#34; width=&#34;400&#34; height=&#34;309&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文出自 &lt;a href=&#34;http://blog.vsharing.com/cio168/A565305.html&#34; target=&#34;_blank&#34;&gt;这里&lt;/a&gt; 《透视中小企业采购流程若干特点》&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>