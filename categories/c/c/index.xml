<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>C/C on Daniex </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://www.daniex.tk/categories/c/c/index.xml/</link>
    <language>zh-cn</language>
    <author>Daniex</author>
    
    <updated>Tue, 21 Jun 2011 09:01:38 &#43;0000</updated>
    
    <item>
      <title>C#调用C&#43;&#43;DLL--委托</title>
      <link>http://www.daniex.tk/blog/2011/c-calling-c-dll-commissioned/</link>
      <pubDate>Tue, 21 Jun 2011 09:01:38 &#43;0000</pubDate>
      <author>Daniex</author>
      <guid>http://www.daniex.tk/blog/2011/c-calling-c-dll-commissioned/</guid>
      <description>&lt;p&gt;直接上代码，ref类型参数传递也是可以的。和之前一篇用反射调用可以互相参考。&lt;span style=&#34;text-decoration: underline;&#34;&gt;&lt;em&gt;&lt;a title=&#34;C#调用C++写的DLL--反射&#34; href=&#34;http://daniex.info/c-call-dll-written-in-c.html&#34; target=&#34;_blank&#34;&gt;C#调用C++DLL&amp;ndash;反射&lt;/a&gt;&lt;/em&gt;&lt;/span&gt;
&lt;pre class=&#34;brush: csharp&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;&lt;/p&gt;

&lt;p&gt;using System.Runtime.InteropServices;&lt;/p&gt;

&lt;p&gt;namespace Test
{
    class DLLLoader
    {
            [DllImport(&amp;ldquo;kernel32.dll&amp;rdquo;)]
            public extern static IntPtr LoadLibrary(string path);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [DllImport(&amp;quot;kernel32.dll&amp;quot;)]
        public extern static IntPtr GetProcAddress(IntPtr lib, string funcName);

        [DllImport(&amp;quot;kernel32.dll&amp;quot;)]
        public extern static bool FreeLibrary(IntPtr lib);

        [DllImport(&amp;quot;kernel32.dll&amp;quot;)]
        public static extern IntPtr GetStdHandle(int nStdHandle);

        [DllImport(&amp;quot;user32&amp;quot;, EntryPoint = &amp;quot;CallWindowProc&amp;quot;)]
        public static extern int CallWindowProc(IntPtr lpPrevWndFunc, int hwnd, int MSG, int wParam, int lParam);

        IntPtr DllLib;//DLL文件名柄     
        #region 构造函数
        public DLLLoader()
        { }
        public DLLLoader(string dllpath)
        {
            DllLib = LoadLibrary(dllpath);
        }
        #endregion
        ///      
        /// 析构函数     
        ///      
        ~DLLLoader()
        {
            FreeLibrary(DllLib);//释放名柄     
        }
        public void initPath(string dllpath)
        {
            if (DllLib == IntPtr.Zero)
            {
                DllLib = LoadLibrary(dllpath);
            }
        }
        ///      
        /// 获取ＤＬＬ中一个方法的委托     
        ///      
        /// &amp;lt;param name=&amp;quot;methodname&amp;quot; /&amp;gt;     
        /// &amp;lt;param name=&amp;quot;methodtype&amp;quot; /&amp;gt;     
        ///      
        public Delegate InvokeMethod(string methodname, Type methodtype)
        {
            IntPtr MethodPtr = GetProcAddress(DllLib, methodname);

            return (Delegate)Marshal.GetDelegateForFunctionPointer(MethodPtr, methodtype);
        }      

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;*********&lt;strong&gt;&lt;em&gt;调用&lt;/em&gt;&lt;/strong&gt;************
        DLLLoader loaddll = new DLLLoader(&amp;ldquo;E:\workspaces\WpfApplication1\Debug\DLL.dll&amp;rdquo;);//实例化加载ＤＬＬ文件的类，，如上&lt;br /&gt;
        public delegate int delegateadd(ref int a);//声明此方法的一个委托&lt;/p&gt;

&lt;p&gt;public void testMethod()
{
        int a = 1;
        delegateadd m = (delegateadd)loaddll.InvokeMethod(&amp;ldquo;add&amp;rdquo;, typeof(delegateadd));//获取其中方法的委托&lt;br /&gt;
        int re = m(ref a);//得到ＲＥ，成功&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;***********&lt;strong&gt;&lt;em&gt;DLL&lt;/em&gt;&lt;/strong&gt;***********
extern &amp;ldquo;C&amp;rdquo; __declspec(dllexport) int add(int &amp;amp; a);&lt;/p&gt;

&lt;p&gt;int add(int &amp;amp; a)
{
    a = 10;
    return 20;
}
&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C#调用C&#43;&#43;写的DLL</title>
      <link>http://www.daniex.tk/blog/2011/c-call-dll-written-in-c/</link>
      <pubDate>Thu, 12 May 2011 06:48:53 &#43;0000</pubDate>
      <author>Daniex</author>
      <guid>http://www.daniex.tk/blog/2011/c-call-dll-written-in-c/</guid>
      <description>&lt;p&gt;方法有不少，这里记录其中的一个方法。编译、调用通过了的。期间遇到的问题是C#调用时传递string类型的参数和返回值会报错。TargetInvocationException异常，值不在范围内，内存不可访问等等。&lt;/p&gt;

&lt;p&gt;解决方法是；在c++的DLL中将string类型的参数返回值改为LPTSTR类型。在C#程序中使用StringBuilder类型来传入参数和接受返回值。&lt;/p&gt;

&lt;p&gt;下面是代码：
&lt;pre class=&#34;brush: csharp&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;&lt;/p&gt;

&lt;p&gt;//1.       打开项目“Tzb”，打开类视图，右击“Tzb”，选择“添加”&amp;ndash;&amp;gt;“类”，类名设置为“dld”，
//即dynamic loading dll 的每个单词的开头字母。
//2.       添加所需的命名空间及声明参数传递方式枚举：
using System.Runtime.InteropServices; // 用 DllImport 需用此 命名空间
using System.Reflection; // 使用 Assembly 类需用此 命名空间
using System.Reflection.Emit; // 使用 ILGenerator 需用此 命名空间&lt;/p&gt;

&lt;p&gt;namespace WpfApplication1
{
    //在“public class dld”上面添加如下代码声明参数传递方式枚举：
    ///
    /// 参数传递方式枚举 ,ByValue 表示值传递 ,ByRef 表示址传递
    ///&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public enum ModePass
{
    ByValue = 0x0001,
    ByRef = 0x0002
}
public class DLD
{      

    //3.       声明LoadLibrary、GetProcAddress、FreeLibrary及私有变量hModule和farProc：        
    /// 
    /// 原型是 :HMODULE LoadLibrary(LPCTSTR lpFileName);
    /// 
    /// &amp;lt; param name=&amp;quot;lpFileName&amp;quot; / &amp;gt;DLL 文件名 
    ///  函数库模块的句柄 
    [DllImport(&amp;quot;kernel32.dll&amp;quot;)]
    static extern IntPtr LoadLibrary(string lpFileName);

    /// 
    /// 原型是 : FARPROC GetProcAddress(HMODULE hModule, LPCWSTR lpProcName);
    /// 
    /// &amp;lt; param name=&amp;quot;hModule&amp;quot; / &amp;gt; 包含需调用函数的函数库模块的句柄 
    /// &amp;lt; param name=&amp;quot;lpProcName&amp;quot; / &amp;gt; 调用函数的名称 
    ///  函数指针 

    [DllImport(&amp;quot;kernel32.dll&amp;quot;)]
    static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName);

    /// 
    /// 原型是 : BOOL FreeLibrary(HMODULE hModule);
    /// 
    /// &amp;lt; param name=&amp;quot;hModule&amp;quot; / &amp;gt; 需释放的函数库模块的句柄 
    ///  是否已释放指定的 Dll

    [DllImport(&amp;quot;kernel32&amp;quot;, EntryPoint = &amp;quot;FreeLibrary&amp;quot;, SetLastError = true)]
    static extern bool FreeLibrary(IntPtr hModule);

    /// 
    /// Loadlibrary 返回的函数库模块的句柄
    /// 

    private IntPtr hModule = IntPtr.Zero;

    /// 
    /// GetProcAddress 返回的函数指针
    /// 

    public IntPtr farProc = IntPtr.Zero;


    //4.       添加LoadDll方法，并为了调用时方便，重载了这个方法：
    /// 
    /// 装载 Dll
    /// 
    /// &amp;lt; param name=&amp;quot;lpFileName&amp;quot; / &amp;gt;DLL 文件名 

    public void LoadDll(string lpFileName)
    {

        hModule = LoadLibrary(lpFileName);
        if (hModule == IntPtr.Zero)
            throw (new Exception(&amp;quot; 没有找到 :&amp;quot; + lpFileName + &amp;quot;.&amp;quot;));
    }


    //         若已有已装载Dll的句柄，可以使用LoadDll方法的第二个版本：
    public void LoadDll(IntPtr HMODULE)
    {
        if (HMODULE == IntPtr.Zero)
            throw (new Exception(&amp;quot; 所传入的函数库模块的句柄 HMODULE 为空 .&amp;quot;));
        hModule = HMODULE;
    }


    //5.       添加LoadFun方法，并为了调用时方便，也重载了这个方法，方法的具体代码及注释如下：
    /// 
    /// 获得函数指针
    /// 
    /// &amp;lt; param name=&amp;quot;lpProcName&amp;quot; / &amp;gt; 调用函数的名称 

    public void LoadFun(string lpProcName)
    { // 若函数库模块的句柄为空，则抛出异常

        if (hModule == IntPtr.Zero)
            throw (new Exception(&amp;quot; 函数库模块的句柄为空 , 请确保已进行 LoadDll 操作 !&amp;quot;));
        // 取得函数指针
        farProc = GetProcAddress(hModule, lpProcName);

        // 若函数指针，则抛出异常
        if (farProc == IntPtr.Zero)
            throw (new Exception(&amp;quot; 没有找到 : &amp;quot; + lpProcName + &amp;quot; 这个函数的入口点 &amp;quot;));

    }

    /// 
    /// 获得函数指针
    /// 
    /// &amp;lt; param name=&amp;quot;lpFileName&amp;quot; / &amp;gt; 包含需调用函数的 DLL 文件名 
    /// &amp;lt; param name=&amp;quot;lpProcName&amp;quot; / &amp;gt; 调用函数的名称 

    public void LoadFun(string lpFileName, string lpProcName)
    { // 取得函数库模块的句柄
        hModule = LoadLibrary(lpFileName);

        // 若函数库模块的句柄为空，则抛出异常
        if (hModule == IntPtr.Zero)
            throw (new Exception(&amp;quot; 没有找到 :&amp;quot; + lpFileName + &amp;quot;.&amp;quot;));

        // 取得函数指针
        farProc = GetProcAddress(hModule, lpProcName);

        // 若函数指针，则抛出异常
        if (farProc == IntPtr.Zero)
            throw (new Exception(&amp;quot; 没有找到 :&amp;quot; + lpProcName + &amp;quot; 这个函数的入口点 &amp;quot;));

    }


    //6.  添加UnLoadDll及Invoke方法，Invoke方法也进行了重载：
    /// 
    /// 卸载 Dll
    /// 

    public void UnLoadDll()
    {
        FreeLibrary(hModule);
        hModule = IntPtr.Zero;
        farProc = IntPtr.Zero;
    }

    /// 
    /// 调用所设定的函数
    /// 
    /// &amp;lt; param name=&amp;quot;ObjArray_Parameter&amp;quot; / &amp;gt; 实参 
    /// &amp;lt; param name=&amp;quot;TypeArray_ParameterType&amp;quot; / &amp;gt; 实参类型 
    /// &amp;lt; param name=&amp;quot;ModePassArray_Parameter&amp;quot; / &amp;gt; 实参传送方式 
    /// &amp;lt; param name=&amp;quot;Type_Return&amp;quot; / &amp;gt; 返回类型 
    ///  返回所调用函数的 object

    public object Invoke(object[] ObjArray_Parameter, Type[] TypeArray_ParameterType, 
                             ModePass[] ModePassArray_Parameter, Type Type_Return)
    {

        // 下面 3 个 if 是进行安全检查 , 若不能通过 , 则抛出异常
        if (hModule == IntPtr.Zero)
            throw (new Exception(&amp;quot; 函数库模块的句柄为空 , 请确保已进行 LoadDll 操作 !&amp;quot;));
        if (farProc == IntPtr.Zero)
            throw (new Exception(&amp;quot; 函数指针为空 , 请确保已进行 LoadFun 操作 !&amp;quot;));
        if (ObjArray_Parameter.Length != ModePassArray_Parameter.Length)
            throw (new Exception(&amp;quot; 参数个数及其传递方式的个数不匹配 .&amp;quot;));

        // 下面是创建 MyAssemblyName 对象并设置其 Name 属性
        AssemblyName MyAssemblyName = new AssemblyName();
        MyAssemblyName.Name = &amp;quot;InvokeFun&amp;quot;;

        // 生成单模块配件
        AssemblyBuilder MyAssemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(
                                                   MyAssemblyName, AssemblyBuilderAccess.Run);
        ModuleBuilder MyModuleBuilder = MyAssemblyBuilder.DefineDynamicModule(&amp;quot;InvokeDll&amp;quot;);

        // 定义要调用的方法 , 方法名为“ MyFun ”，返回类型是“ Type_Return ”
        //参数类型是“ TypeArray_ParameterType ”
        MethodBuilder MyMethodBuilder = MyModuleBuilder.DefineGlobalMethod(
                                      &amp;quot;Init&amp;quot;, MethodAttributes.Public | MethodAttributes.Static, 
                                      Type_Return, TypeArray_ParameterType);

        // 获取一个 ILGenerator ，用于发送所需的 IL
        ILGenerator IL = MyMethodBuilder.GetILGenerator();

        int i;
        for (i = 0; i &amp;amp;lt; ObjArray_Parameter.Length; i++)
        {// 用循环将参数依次压入堆栈
            switch (ModePassArray_Parameter[i])
            {
                case ModePass.ByValue:
                    IL.Emit(OpCodes.Ldarg, i);
                    break;
                case ModePass.ByRef:
                    IL.Emit(OpCodes.Ldarga, i);
                    break;
                default:
                    throw (new Exception(&amp;quot; 第 &amp;quot; + (i + 1).ToString() + &amp;quot; 个参数没有给定正确的传递方式 .&amp;quot;));
            }
        }

        if (IntPtr.Size == 4)
        {// 判断处理器类型
            IL.Emit(OpCodes.Ldc_I4, farProc.ToInt32());
        }
        else if (IntPtr.Size == 8 )
        {
            IL.Emit(OpCodes.Ldc_I8, farProc.ToInt64());
        }
        else
        {
            throw new PlatformNotSupportedException();
        }

        IL.EmitCalli(OpCodes.Calli, CallingConvention.StdCall, Type_Return, TypeArray_ParameterType);
        IL.Emit(OpCodes.Ret); // 返回值
        MyModuleBuilder.CreateGlobalFunctions();

        // 取得方法信息
        MethodInfo MyMethodInfo = MyModuleBuilder.GetMethod(&amp;quot;Init&amp;quot;);
        return MyMethodInfo.Invoke(null, ObjArray_Parameter);// 调用方法，并返回其值
    }



    //Invoke方法的第二个版本，它是调用了第一个版本的：
    /// 
    /// 调用所设定的函数
    /// 
    /// &amp;lt; param name=&amp;quot;IntPtr_Function&amp;quot; / &amp;gt; 函数指针 
    /// &amp;lt; param name=&amp;quot;ObjArray_Parameter&amp;quot; / &amp;gt; 实参 
    /// &amp;lt; param name=&amp;quot;TypeArray_ParameterType&amp;quot; / &amp;gt; 实参类型 
    /// &amp;lt; param name=&amp;quot;ModePassArray_Parameter&amp;quot; / &amp;gt; 实参传送方式 
    /// &amp;lt; param name=&amp;quot;Type_Return&amp;quot; / &amp;gt; 返回类型 
    ///  返回所调用函数的 object

    public object Invoke(IntPtr IntPtr_Function, object[] ObjArray_Parameter, 
                           Type[] TypeArray_ParameterType, ModePass[] ModePassArray_Parameter, 
                           Type Type_Return)
    {

        // 下面 2 个 if 是进行安全检查 , 若不能通过 , 则抛出异常
        if (hModule == IntPtr.Zero)
            throw (new Exception(&amp;quot; 函数库模块的句柄为空 , 请确保已进行 LoadDll 操作 !&amp;quot;));
        if (IntPtr_Function == IntPtr.Zero)
            throw (new Exception(&amp;quot; 函数指针 IntPtr_Function 为空 !&amp;quot;));
        farProc = IntPtr_Function;
        return Invoke(ObjArray_Parameter, TypeArray_ParameterType, ModePassArray_Parameter, Type_Return);
    }            

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
&lt;/pre&gt;
&lt;pre class=&#34;brush: csharp&#34;&gt;/****&lt;strong&gt;&lt;em&gt;调用方法&lt;/em&gt;&lt;/strong&gt;***/
        private void button1_Click(object sender, RoutedEventArgs e)
        {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        DLD newDLL = new DLD();
        newDLL.LoadFun(&amp;quot;E:\\workspaces\\WpfApplication1\\Debug\\DLL.dll&amp;quot;, &amp;quot;Init&amp;quot;);
        StringBuilder MyStringBuilder = new StringBuilder(&amp;quot;Hello World!&amp;quot;);
        object[] obj = new object[] { MyStringBuilder };
        Type[] ty = new Type[] { typeof(StringBuilder) };
        ModePass[] mode = new ModePass[] { ModePass.ByValue };
        Type Type_Return = typeof(StringBuilder);
        StringBuilder j = (StringBuilder)newDLL.Invoke(obj, ty, mode, Type_Return);

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/*****&lt;strong&gt;&lt;em&gt;c++DLL中的函数&lt;/em&gt;&lt;/strong&gt;****/&lt;/p&gt;

&lt;p&gt;extern &amp;ldquo;C&amp;rdquo; __declspec(dllexport) LPTSTR Init(LPTSTR a);&lt;/p&gt;

&lt;p&gt;LPTSTR Init(LPTSTR a)
{
    strcat((char *)a, &amp;ldquo;added&amp;rdquo;);
    return a;
}
&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用OpenSSL和Keytool在java和C&#43;&#43;间建立SSL链接</title>
      <link>http://www.daniex.tk/blog/2011/using-openssl-keytool-build-sslconnection-between-c-java/</link>
      <pubDate>Tue, 03 May 2011 10:34:12 &#43;0000</pubDate>
      <author>Daniex</author>
      <guid>http://www.daniex.tk/blog/2011/using-openssl-keytool-build-sslconnection-between-c-java/</guid>
      <description>

&lt;p&gt;C++和java间进行SSL通信遇到了些问题，下面是解决方案。使用了Keytoo和OpenSSL两个工具。TARGETNAME改成要生成的文件名，PASSPHRASE就是密码。
基础的OpenSSL操作可以参考前文：
安装：&lt;a title=&#34;Windows下安装OpenSSL&#34; href=&#34;http://daniex.info/windows-install-openssl.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://daniex.info/windows-install-openssl.html&#34;&gt;http://daniex.info/windows-install-openssl.html&lt;/a&gt;&lt;/a&gt;
生成证书：&lt;a title=&#34;用openssl命令制作生成证书和自签名&#34; href=&#34;http://daniex.info/generated-with-the-openssl-command-to-create-self-signed-certificates-and.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://daniex.info/generated-with-the-openssl-command-to-create-self-signed-certificates-and.html&#34;&gt;http://daniex.info/generated-with-the-openssl-command-to-create-self-signed-certificates-and.html&lt;/a&gt;&lt;/a&gt;
代码： &lt;a title=&#34;openssl建立SSL连接例子程序&#34; href=&#34;http://daniex.info/examples-of-procedures-to-establish-ssl-connection-openssl.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://daniex.info/examples-of-procedures-to-establish-ssl-connection-openssl.html&#34;&gt;http://daniex.info/examples-of-procedures-to-establish-ssl-connection-openssl.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;生成私钥
Keytool –certreq –alias client –sigalg SHA1withRSA –file TARGETNAME.csr  -keypass PASSPHRASE –storepass PASSPHRASE –keystore TARGETNAME.jks
生成证书
Openssl ca –in TARGETNAME.csr –out TARGETNAME.crt –cert demoCA/cacert.pem  -keyfile demoCA/private/cakey.pem -notext
转换证书格式
Openssl x509 –in TARGETNAME.crt –out TARGETNAME.der –outform DER
转换根帧数格式
Openssl x509 –in demoCA/cacert.pem –out demoCA/cacert.der –outform DER
将根证书加入私钥
Keytool –import –v –trustcacerts –alias ca_root –file demoCA/cacert.der –storepass PASSPHRASE –keystore TARGETNAME.jks
将证书加入私钥
Keytool –import –v –alias client –file TARGETNAME.der –storepass PASSPHRASE –keystore TARGETNAME.jks
创建jks文件并加入根证书
Keytool –import –alias ca_root –file demoCA/cacert.der –keystore TARGETNAMETrust.jks&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;更详细的可以参考下文，来源；&lt;a title=&#34;Essential Security Tools: OpenSSL and Keytool&#34; href=&#34;http://blog.csdn.net/platformlib/archive/2007/03/09/1525119.aspx&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://blog.csdn.net/platformlib/archive/2007/03/09/1525119.aspx&#34;&gt;http://blog.csdn.net/platformlib/archive/2007/03/09/1525119.aspx&lt;/a&gt;&lt;/a&gt;
&lt;h2&gt;1、OpenSSL实践&lt;/h2&gt;
工作中需要配置使用SSL来双向认证并通信的FTP服务器，以OpenSSL和Java的keytool为例，来完成证书的制作：&lt;/p&gt;

&lt;p&gt;d:\openssl\mkcerts&amp;gt;openssl genrsa -out ca.key 1024&lt;/p&gt;

&lt;p&gt;创建CA私钥
Loading &amp;lsquo;screen&amp;rsquo; into random state - done
warning, not much extra random data, consider using the -rand option
Generating RSA private key, 1024 bit long modulus
&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.++++++
&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.++++++
e is 65537 (0x10001)&lt;/p&gt;

&lt;p&gt;d:\openssl\mkcerts&amp;gt;openssl req -new -days 3650 -x509 -key ca.key -out cacert.pem -config openssl.cnf&lt;/p&gt;

&lt;p&gt;创建CA自签名证书(使用上一步创建的CA私钥来签名)
Using configuration from openssl.cnf
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;If you enter &amp;lsquo;.&amp;rsquo;, the field will be left blank.&lt;/h2&gt;

&lt;p&gt;Country Name (2 letter code) [AU]:CN
State or Province Name (full name) [Some-State]:BEIJING
Locality Name (eg, city) []:BEIJING
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Chelseafc
Organizational Unit Name (eg, section) []:FTPTest
Common Name (eg, YOUR name) []:CHELSEA
Email Address []:chelsea@chelseafc.com&lt;/p&gt;

&lt;p&gt;d:\openssl\mkcerts&amp;gt;openssl genrsa -des3 -out server.key 1024&lt;/p&gt;

&lt;p&gt;创建服务器私钥
Loading &amp;lsquo;screen&amp;rsquo; into random state - done
warning, not much extra random data, consider using the -rand option
Generating RSA private key, 1024 bit long modulus
&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;..++++++
.++++++
e is 65537 (0x10001)
Enter PEM pass phrase:
Verifying password - Enter PEM pass phrase:&lt;/p&gt;

&lt;p&gt;d:\openssl\mkcerts&amp;gt;openssl rsa -in server.key -out serverkey.pem&lt;/p&gt;

&lt;p&gt;加密服务器私钥(保护私钥信息)
read RSA key
Enter PEM pass phrase:
writing RSA key&lt;/p&gt;

&lt;p&gt;d:\openssl\mkcerts&amp;gt;openssl req -new -days 3650 -key server.key -out server.csr-config openssl.cnf&lt;/p&gt;

&lt;p&gt;创建申请服务器所需证书的请求
Using configuration from openssl.cnf
Enter PEM pass phrase:
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;If you enter &amp;lsquo;.&amp;rsquo;, the field will be left blank.&lt;/h2&gt;

&lt;p&gt;Country Name (2 letter code) [AU]:CN
State or Province Name (full name) [Some-State]:BEIJING
Locality Name (eg, city) [] :BEIJING
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Chelseafc
Organizational Unit Name (eg, section) []: FTPTest
Common Name (eg, YOUR name) []: CHELSEA
Email Address []: chelsea@chelseafc.com&lt;/p&gt;

&lt;p&gt;Please enter the following &amp;lsquo;extra&amp;rsquo; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:&lt;/p&gt;

&lt;p&gt;d:\openssl\mkcerts&amp;gt;openssl ca -days 3650 -keyfile ca.key -cert cacert.pem -outdir . -in server.csr -out server.pem -config openssl.cnf&lt;/p&gt;

&lt;p&gt;CA签署服务器证书(需要CA私钥和序列号文件demoCA/serial, demoCA/index.txt)
Using configuration from openssl.cnf
Loading &amp;lsquo;screen&amp;rsquo; into random state - done
Check that the request matches the signature
Signature ok
The Subjects Distinguished Name is as follows
countryName : PRINTABLE:&amp;lsquo;CN&amp;rsquo;
stateOrProvinceName : PRINTABLE:&amp;lsquo;BEIJING&amp;rsquo;
localityName : PRINTABLE:&amp;lsquo;BEIJING&amp;rsquo;
organizationName : PRINTABLE:&amp;lsquo;Chelseafc&amp;rsquo;
organizationalUnitName: PRINTABLE:&amp;lsquo;FTPTest&amp;rsquo;
commonName : PRINTABLE:&amp;lsquo;CHELSEA&amp;rsquo;
emailAddress : IA5STRING:&amp;lsquo;chelsea@chelseafc.com&amp;rsquo;
Certificate is to be certified until Oct 26 03:01:33 2006 GMT (365 days)
Sign the certificate? [y/n]: y&lt;/p&gt;

&lt;p&gt;1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated&lt;/p&gt;

&lt;p&gt;d:\openssl\mkcerts&amp;gt;openssl x509 -in server.pem -out server.crt&lt;/p&gt;

&lt;p&gt;转换格式&lt;/p&gt;

&lt;p&gt;d:\openssl\mkcerts&amp;gt;openssl x509 -in demoCA/cacert.pem -out demoCA/cacert.crt&lt;/p&gt;

&lt;p&gt;转换格式&lt;/p&gt;

&lt;p&gt;d:\openssl\mkcerts&amp;gt;keytool -genkey -keyalg RSA -alias ftpsconnector -keystore ftps.jks -storepass changeit -storetype jks&lt;/p&gt;

&lt;p&gt;产生Java客户端私钥文件
您的名字与姓氏是什么？
[Unknown]： CHELSEA
您的组织单位名称是什么？
[Unknown]： FTPTest
您的组织名称是什么？
[Unknown]： Chelseafc
您所在的城市或区域名称是什么？
[Unknown]： BEIJING
您所在的州或省份名称是什么？
[Unknown]： BEIJING
该单位的两字母国家代码是什么
[Unknown]： CN
CN=CHELSEA, OU=FTPTest, O=Chelseafc, L=BEIJING, ST=BEIJING, C=CN 正确吗？
[否]： Y&lt;/p&gt;

&lt;p&gt;输入&amp;lt;ftpsconnector&amp;gt;的主密码
（如果和 keystore 密码相同，按回车）：&lt;/p&gt;

&lt;p&gt;d:\openssl\mkcerts&amp;gt;keytool -certreq -alias ftpsconnector -keyalg RSA -file ftpsconnector.csr -keystore ftps.jks&lt;/p&gt;

&lt;p&gt;产生Java客户端证书请求
输入keystore密码： changeit&lt;/p&gt;

&lt;p&gt;d:\openssl\mkcerts&amp;gt;openssl ca -days 3650 -keyfile ca.key -cert cacert.pem -outdir . -in ftpsconnector.csr -out ftpsconnector.pem -config openssl.cnf&lt;/p&gt;

&lt;p&gt;CA签署Java客户端证书
Using configuration from openssl.cnf
Loading &amp;lsquo;screen&amp;rsquo; into random state - done
Check that the request matches the signature
Signature ok
The Subjects Distinguished Name is as follows
countryName : PRINTABLE:&amp;lsquo;CN&amp;rsquo;
stateOrProvinceName : PRINTABLE:&amp;lsquo;BEIJING&amp;rsquo;
localityName : PRINTABLE:&amp;lsquo;BEIJING&amp;rsquo;
organizationName : PRINTABLE:&amp;lsquo;Chelseafc&amp;rsquo;
organizationalUnitName: PRINTABLE:&amp;lsquo;FTPTest&amp;rsquo;
commonName : PRINTABLE:&amp;lsquo;CHELSEA&amp;rsquo;
Certificate is to be certified until Oct 26 03:05:08 2006 GMT (365 days)
Sign the certificate? [y/n]:y&lt;/p&gt;

&lt;p&gt;1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated&lt;/p&gt;

&lt;p&gt;d:\openssl\mkcerts&amp;gt;openssl x509 -in ftpsconnector.pem -out ftpsconnector.cer&lt;/p&gt;

&lt;p&gt;转换格式&lt;/p&gt;

&lt;p&gt;d:\openssl\mkcerts&amp;gt;keytool -import -alias root -trustcacerts -file demoCA/cacert.crt -keystore ftps.jks&lt;/p&gt;

&lt;p&gt;导入CA证书到jks文件并信任之(由此CA所签署的所有证书也因此在信任之列)&lt;/p&gt;

&lt;p&gt;输入keystore密码： changeit
Owner: EMAILADDRESS=chelsea@chelseafc.com, CN=CHELSEA, OU=FTPTest, O=Chelseafc, L=BEIJING, S
T=BEIJING, C=CN
发照者： EMAILADDRESS=chelsea@chelseafc.com, CN=CHELSEA, OU=FTPTest, O=Chelseafc, L=BEIJING,
ST=BEIJING, C=CN
序号： 0
有效期间： Wed Oct 26 10:55:43 CST 2005 至： Sat Oct 24 10:55:43 CST 2015
认证指纹：
MD5： 85:21:11:10:26:4A:CD:01:55:B7:47:DF:0D:58:AA:A3
SHA1： 91:74:88:03:B7:5C:E4:BD:27:1F:27:BF:10:23:0A:BA:2C:42:13:2B
信任这个认证？ [否]： y
认证已添加至keystore中&lt;/p&gt;

&lt;p&gt;d:\openssl\mkcerts&amp;gt;keytool -import -alias ftpsconnector -trustcacerts -file ftpsconnector.cer -keystore ftps.jks&lt;/p&gt;

&lt;p&gt;导入自己的证书到jks文件(至此,此jks文件包括了建立SSL连接所需所有信息)
输入keystore密码： changeit
认证回复已安装在 keystore中&lt;/p&gt;

&lt;p&gt;其它OpenSSL命令举例&lt;/p&gt;

&lt;p&gt;openssl pkcs12 -export -clcerts -in client.pem -inkey clientkey.pem -out client.p12&lt;/p&gt;

&lt;p&gt;openssl pkcs8 -inform PEM -nocrypt -in abcwebnet-pkcs8.key -out abcwebnet.key&lt;/p&gt;

&lt;p&gt;openssl pkcs12 -export -out abcwebnet.pfx -inkey abcwebnet.key -in abcwebnet-pem.crt&lt;/p&gt;

&lt;p&gt;&amp;hellip; &amp;hellip;
&lt;h2&gt;2、keytool实践&lt;/h2&gt;
keystore这个名字其实有点误导,应该是CertStore,可以同时包含两种信息:自己的keyEntry,和trusted cert entry.(自然包括自己的私钥公钥和信任的公钥了)(有时会分开,信任的证书存储在单独的文件中)&lt;/p&gt;

&lt;p&gt;keystore可以有两类密码,一个是保护这个文件的(storepass),一种是保护文件里每一个key的(keypass)&lt;/p&gt;

&lt;p&gt;可以为每个key指定alias,然后使用alias来引用或访问对应的key&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;rem 创建客户端keystore&lt;/p&gt;

&lt;p&gt;keytool -genkey -keyalg RSA -keystore client.jks -storetype jks -storepass client -alias client_rsa -keypass client_rsa -dname &amp;ldquo;CN=Client, OU=IBM, C=US&amp;rdquo; -keysize 1024 -validity 1460&lt;/p&gt;

&lt;p&gt;rem 创建服务端keystore&lt;/p&gt;

&lt;p&gt;keytool -genkey -keyalg RSA -keystore server.jks -storetype jks -storepass server -alias server_rsa -keypass server_rsa -dname &amp;ldquo;CN=Server, OU=IBM, C=US&amp;rdquo; -keysize 1024 -validity 1460&lt;/p&gt;

&lt;p&gt;rem 从客户端keystore中导出通用格式的证书,以备导入到服务端keystore&lt;/p&gt;

&lt;p&gt;keytool -export -keystore client.jks -storetype jks -storepass client -alias client_rsa -file client_rsa.cer&lt;/p&gt;

&lt;p&gt;rem 从服务端keystore中导出通用格式的证书,以备导入到客户端keystore&lt;/p&gt;

&lt;p&gt;keytool -export -keystore server.jks -storetype jks -storepass server -alias server_rsa -file server_rsa.cer&lt;/p&gt;

&lt;p&gt;rem 导入客户端证书到服务端keystore(此动作的后果是使服务端信任客户端)&lt;/p&gt;

&lt;p&gt;keytool -import -noprompt -keystore server.jks -storetype jks -storepass server -alias client_rsa -file client_rsa.cer&lt;/p&gt;

&lt;p&gt;rem 导入服务端证书到客户端keystore(此动作的后果是使客户端信任服务端)&lt;/p&gt;

&lt;p&gt;keytool -import -noprompt -keystore client.jks -storetype jks -storepass client -alias server_rsa -file server_rsa.cer&lt;/p&gt;

&lt;p&gt;rem 列出客户端keystore包含的信息供查看&lt;/p&gt;

&lt;p&gt;keytool -list -keystore client.jks -storepass client -v&lt;/p&gt;

&lt;p&gt;rem 列出服务端keystore包含的信息供查看&lt;/p&gt;

&lt;p&gt;keytool -list -keystore server.jks -storepass server -v&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>openssl建立SSL连接例子程序</title>
      <link>http://www.daniex.tk/blog/2011/examples-of-procedures-to-establish-ssl-connection-openssl/</link>
      <pubDate>Tue, 19 Apr 2011 11:15:46 &#43;0000</pubDate>
      <author>Daniex</author>
      <guid>http://www.daniex.tk/blog/2011/examples-of-procedures-to-establish-ssl-connection-openssl/</guid>
      <description>&lt;p&gt;下面是server 和client 的代码。用没跑过，但是用类似的代码跑了。流程是这样的。要注意的是openssl中ssl连接建立前用阻塞的socket，建立后可以设置非阻塞。openssl每个操作后最好检查下是否成功。
&lt;pre class=&#34;brush:php&#34;&gt;
/*********&lt;strong&gt;&lt;em&gt;server&lt;/em&gt;&lt;/strong&gt;*******************&lt;strong&gt;&lt;em&gt;/
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;winsock2.h&amp;gt;
#include &amp;lt;openssl/ssl.h&amp;gt;
#include &amp;lt;openssl/x509.h&amp;gt;
#include &amp;lt;openssl/rand.h&amp;gt;
#include &amp;lt;openssl/err.h&amp;gt;
&amp;nbsp;
#pragma comment (lib,&amp;ldquo;WS2_32.lib&amp;rdquo;)
#pragma comment( lib, &amp;ldquo;libeay32.lib&amp;rdquo; )
#pragma comment( lib, &amp;ldquo;ssleay32.lib&amp;rdquo; )
&amp;nbsp;
char buffer[10001] = {0};
&amp;nbsp;
int main()
{
SSL_library_init(); //初始化SSL库
OpenSSL_add_all_algorithms(); //支持所有算法
SSL_load_error_strings();  //提供将错误号解析为字符串的功能
SSL *ssl = NULL;
SSL_CTX *ssl_ctx = NULL;
SSL_METHOD *ssl_method = NULL;
X509 *client_cert = NULL;
//设置客户端使用的SSL版本
//ssl_method = SSLv3_server_method();
ssl_method = SSLv23_server_method();
//创建SSL上下文环境 每个进程只需维护一个SSL_CTX结构体
ssl_ctx = SSL_CTX_new(ssl_method);
&amp;nbsp;
//验证对方
SSL_CTX_set_verify(ssl_ctx,SSL_VERIFY_PEER,NULL);
&amp;nbsp;
//若验证,则放置CA证书
SSL_CTX_load_verify_locations(ssl_ctx, &amp;ldquo;cacert.pem&amp;rdquo;, NULL);
&amp;nbsp;
//设置pass phrase
SSL_CTX_set_default_passwd_cb_userdata(ssl_ctx, &amp;ldquo;pass phrase&amp;rdquo;);
//读取证书文件
SSL_CTX_use_certificate_file(ssl_ctx,&amp;rdquo;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;Cert.pem&amp;rdquo;,SSL_FILETYPE_PEM);
&amp;nbsp;
//读取密钥文件
SSL_CTX_use_PrivateKey_file(ssl_ctx,&amp;rdquo;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;Key.pem&amp;rdquo;,SSL_FILETYPE_PEM);
&amp;nbsp;
//验证密钥是否与证书一致
SSL_CTX_check_private_key(ssl_ctx);
&amp;nbsp;
/*构建随机数生成机制,WIN32平台必需&lt;/em&gt;/
srand( (unsigned)time( NULL ) );
for( int i = 0;    i &amp;lt; 100;i++ )
seed_int[i] = rand();
RAND_seed(seed_int, sizeof(seed_int));
//设置加密方式
//SSL_CTX_set_cipher_list(ssl_ctx,&amp;ldquo;RC4-MD5&amp;rdquo;);
//建立TCP服务器端、开始监听并接受客户端连接请求
&amp;nbsp;
// 初始化 Winsock.
WSADATA wsaData;
int iResult = WSAStartup( MAKEWORD(2,2), &amp;amp;wsaData );
if ( iResult != NO_ERROR )
{
//失败
return -1;
}
// 建立socket
server = socket( AF_INET, SOCK_STREAM, IPPROTO_TCP );
if ( server == INVALID_SOCKET )
{
//失败
WSACleanup();
return -2;
}
&amp;nbsp;
// 绑定socket
sockaddr_in service;
service.sin_family = AF_INET;
//service.sin_addr.s_addr = inet_addr(&amp;ldquo;127.0.0.1&amp;rdquo;);
service.sin_addr.s_addr = INADDR_ANY;
service.sin_port = htons( 8899 );
&amp;nbsp;
if ( bind( server, (SOCKADDR*) &amp;amp;service, sizeof(service) ) == SOCKET_ERROR )
{
//失败
closesocket(server);
return -3;
}
&amp;nbsp;
// 监听 socket
if ( listen( server, 10 ) == SOCKET_ERROR )
{
//失败
return -4;
}
&amp;nbsp;
do
{
sClient = accept(server,NULL,NULL);
Sleep(100);
}while(sClient == INVALID_SOCKET);
&amp;nbsp;
//创建当前连接的SSL结构体
ssl = SSL_new(ssl_ctx);
//将SSL绑定到套接字上
SSL_set_fd(ssl, sClient);
&amp;nbsp;
//接受SSL链接
SSL_accept(ssl);
&amp;nbsp;
//获取和释放客户端证书
client_cert = SSL_get_peer_certificate(ssl);
//打印所有加密算法的信息(可选)
std::cout&amp;lt;&amp;lt;&amp;ldquo;SSL connection using&amp;rdquo;&amp;lt;&amp;lt;SSL_get_cipher(ssl)&amp;lt;&amp;lt;std::endl;
&amp;nbsp;
X509_free(client_cert);
&amp;nbsp;
//unsigned long cmd;
//if (SOCKET_ERROR == ioctlsocket(sClient, FIONBIO, &amp;amp;cmd))
//{
//创建套接字时发生错误，非阻塞设置失败
//ErrorProcess();
//closesocket(sClient);
//}
&amp;nbsp;
while(true)
{
SSL_read(ssl, buffer, 10000);
memset(buffer,0,10000);
SSL_write(ssl, &amp;ldquo;hello, world!&amp;rdquo;, sizeof(&amp;ldquo;hello, world!&amp;rdquo;));
Sleep(1000);
&amp;nbsp;
}
&amp;nbsp;
//断开SSL链接
SSL_shutdown(ssl);
//释放当前SSL链接结构体
SSL_free(ssl);
//断开TCP链接
closesocket(sClient);
//释放SSL上下文
SSL_CTX_free(ssl_ctx);
&amp;nbsp;
return 0;
}
&lt;/pre&gt;
&lt;pre class=&#34;brush:php&#34;&gt;
/&lt;/strong&gt;*********&lt;strong&gt;&lt;em&gt;client&lt;/em&gt;&lt;/strong&gt;***************&lt;strong&gt;&lt;em&gt;/
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;winsock2.h&amp;gt;
#include &amp;lt;openssl/ssl.h&amp;gt;
#include &amp;lt;openssl/x509.h&amp;gt;
#include &amp;lt;openssl/rand.h&amp;gt;
#include &amp;lt;openssl/err.h&amp;gt;
#pragma comment (lib,&amp;ldquo;WS2_32.lib&amp;rdquo;)
#pragma comment( lib, &amp;ldquo;libeay32.lib&amp;rdquo; )
#pragma comment( lib, &amp;ldquo;ssleay32.lib&amp;rdquo; )
&amp;nbsp;
int main(int argc, _TCHAR&lt;/em&gt; argv[])
{
&amp;nbsp;
SOCKET client;
char buffer[256] = {0};
int  seed_int[100]; /&lt;em&gt;存放随机序列&lt;/em&gt;/
&amp;nbsp;
SSL &lt;em&gt;ssl = NULL;
SSL_CTX *ssl_ctx = NULL;
SSL_METHOD *ssl_method = NULL;
X509 *server_cert = NULL;
&amp;nbsp;
SSL_library_init();        //init libraries
OpenSSL_add_all_algorithms(); //支持所有算法
SSL_load_error_strings();  //提供将错误号解析为字符串的功能
&amp;nbsp;
&amp;nbsp;
//设置客户端使用的SSL版本
ssl_method = SSLv3_client_method();
//创建SSL上下文环境 每个进程只需维护一个SSL_CTX结构体
ssl_ctx = SSL_CTX_new(ssl_method);
/*构建随机数生成机制,WIN32平台必需&lt;/em&gt;/
srand( (unsigned)time( NULL ) );
for( int i = 0;    i &amp;lt; 100;i++ )
seed_int[i] = rand();
RAND_seed(seed_int, sizeof(seed_int));
&amp;nbsp;
&amp;nbsp;
/* Load the RSA CA certificate into the SSL_CTX structure &lt;em&gt;/
/&lt;/em&gt; This will allow this client to verify the server&amp;rsquo;s   &lt;em&gt;/
/&lt;/em&gt; certificate.                             &lt;em&gt;/
SSL_CTX_load_verify_locations(ssl_ctx, &amp;ldquo;cacert.pem&amp;rdquo;, NULL);
&amp;nbsp;
/&lt;/em&gt; Set flag in context to require peer (server) certificate verification */
SSL_CTX_set_verify(ssl_ctx,SSL_VERIFY_PEER,NULL);
SSL_CTX_set_verify_depth(ssl_ctx,1);
SSL_CTX_set_default_passwd_cb_userdata(ssl_ctx, &amp;ldquo;pass phrase&amp;rdquo;);
//读取证书文件
SSL_CTX_use_certificate_file(ssl_ctx,&amp;rdquo;&lt;/strong&gt;*&lt;strong&gt;&lt;em&gt;Cert.pem&amp;rdquo;,SSL_FILETYPE_PEM);
//读取密钥文件
SSL_CTX_use_PrivateKey_file(ssl_ctx,&amp;rdquo;&lt;/em&gt;&lt;/strong&gt;**&lt;em&gt;Key.pem&amp;rdquo;,SSL_FILETYPE_PEM);
//验证密钥是否与证书一致
SSL_CTX_check_private_key(ssl_ctx);
&amp;nbsp;
&amp;nbsp;
//建立TCP链接
// 初始化 Winsock.
WSADATA wsaData;
int iResult = WSAStartup( MAKEWORD(2,2), &amp;amp;wsaData );
if ( iResult != NO_ERROR )
{
//AfxMessageBox(&amp;ldquo;Error at WSAStartup()!&amp;rdquo;);
return;
}
&amp;nbsp;
// 建立socket socket.
client = socket( AF_INET, SOCK_STREAM, IPPROTO_TCP );
if ( client == INVALID_SOCKET )
{
//AfxMessageBox(&amp;ldquo;Error at socket!&amp;rdquo;);
WSACleanup();
return;
}
&amp;nbsp;
// 连接到服务器.
sockaddr_in clientService;
clientService.sin_family = AF_INET;
clientService.sin_addr.s_addr = inet_addr( &amp;ldquo;127.0.0.1&amp;rdquo; );
clientService.sin_port = htons( 8899 );
if ( connect( client, (SOCKADDR&lt;/em&gt;) &amp;amp;clientService, sizeof(clientService) ) == SOCKET_ERROR)
{
//AfxMessageBox( &amp;ldquo;Failed to connect!&amp;rdquo; );
WSACleanup();
return;
}
&amp;nbsp;
//unsigned long cmd;
//if (SOCKET_ERROR == ioctlsocket(client, FIONBIO, &amp;amp;cmd))
//{
//  //AfxMessageBox( &amp;ldquo;创建套接字时发生错误，非阻塞设置失败：&amp;rdquo;);
//  closesocket(client);
//}
//创建维护当前连接信息的SSL结构体
ssl = SSL_new(ssl_ctx);
//将SSL绑定到套接字上
SSL_set_fd(ssl, client);
//建立SSL链接
SSL_connect(ssl);
&amp;nbsp;
//获取服务器端证书
server_cert = SSL_get_peer_certificate(ssl);
&amp;nbsp;
//释放服务器端证书
X509_free(server_cert);
&amp;nbsp;
unsigned long cmd;
if (SOCKET_ERROR == ioctlsocket(client, FIONBIO, &amp;amp;cmd))
{
//AfxMessageBox( &amp;ldquo;创建套接字时发生错误，非阻塞设置失败：&amp;rdquo;);
closesocket(client);
}
while(true)
{
SSL_write(ssl, &amp;ldquo;hello, world!&amp;rdquo;, sizeof(&amp;ldquo;hello, world!&amp;rdquo;)；
SSL_read(ssl, buffer, 255);
printf(&amp;ldquo;received: %s\n&amp;rdquo;,buffer);
memset(buffer,0,255);
&amp;nbsp;
Sleep(1000);
}
//断开SSL链接
SSL_shutdown(ssl);
//释放当前SSL链接结构体
SSL_free(ssl);
closesocket(client);
//释放上下文
SSL_CTX_free(ssl_ctx);
&amp;nbsp;
return 0;
}
&amp;nbsp;
&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用openssl命令制作生成证书和自签名</title>
      <link>http://www.daniex.tk/blog/2011/generated-with-the-openssl-command-to-create-self-signed-certificates-and/</link>
      <pubDate>Sat, 16 Apr 2011 10:04:41 &#43;0000</pubDate>
      <author>Daniex</author>
      <guid>http://www.daniex.tk/blog/2011/generated-with-the-openssl-command-to-create-self-signed-certificates-and/</guid>
      <description>&lt;p&gt;前文描述了如何在window下按安装openssl后，这里说下如何利用openssl生成证书。&lt;/p&gt;

&lt;p&gt;1、  新建工作目录，将openssl安装路径下的apps/CA.pl 和 apps/openssl.cnf（在window中该文件会显示成名为openssl的快速拨号程序）文件复制到该路径。可以修改openssl.cnf文件中的一些参数。启动控制台，执行命令
CA.pl -newca
生成CA工作所需的文件和文件夹。即该目录下新生成的demoCA文件夹。将openssl安装路径下的apps\demoCA\serial文件复制到生成的demoCA文件夹下。&lt;/p&gt;

&lt;p&gt;可以略去该步骤，在安装路径\apps下执行后续步骤。&lt;/p&gt;

&lt;p&gt;2、  生成根证书和对应的私钥
openssl req -new -x509 -keyout cakey.pem -out cacert.pem -config openssl.cnf
记住输入的pass phrase、国家、省、组织等参数，不能全为空。将生成的cakey.pem放到demoCA/private目录下，将cacert.pem放到demoCA目录下。
注意：在window下需要openssl命令都需要增加-config openssl.cnf参数，防止因找不到配置文件而报错。Linux下不需要该参数。
&lt;img alt=&#34;&#34; src=&#34;http://farm6.static.flickr.com/5189/5620697845_30c20ca29e.jpg&#34; title=&#34;生成证书&#34; class=&#34;aligncenter&#34; width=&#34;500&#34; height=&#34;483&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3、  生成服务证书私钥和证书请求文件
openssl req -newkey rsa:2048 -out newCSR.pem -keyout newKey.pem -config openssl.cnf
如果要生成多个证书私钥对，注意输入Common Name值要不同。如果不是自签名，可将生成的证书请求文件newCSR.pem交由相关组织签发证书。&lt;/p&gt;

&lt;p&gt;4、  用根证书签发该服务证书
openssl ca -in newCSR.pem -out newCert.pem -config openssl.cnf
&lt;img alt=&#34;&#34; src=&#34;http://farm6.static.flickr.com/5189/5620697845_30c20ca29e.jpg&#34; title=&#34;签名&#34; class=&#34;aligncenter&#34; width=&#34;500&#34; height=&#34;483&#34; /&gt;&lt;/p&gt;

&lt;p&gt;至此，我们生成了根证书和私钥cakey.pem、cacert.pem。用于服务由根证书签发了的证书newCert.pem和对应私钥newKey.pem。openssl编程过程中，需要验证newCert.pem和newKey.pem是否匹配。用根证书cacert.pem验证newCert.pem是否可信。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>